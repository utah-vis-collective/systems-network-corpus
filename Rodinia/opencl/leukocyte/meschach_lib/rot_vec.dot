digraph "CFG for 'rot_vec' function" {
	label="CFG for 'rot_vec' function";

	Node0x60000316a030 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{6:\l|  %7 = alloca ptr, align 8\l  %8 = alloca i32, align 4\l  %9 = alloca i32, align 4\l  %10 = alloca double, align 8\l  %11 = alloca double, align 8\l  %12 = alloca ptr, align 8\l  %13 = alloca double, align 8\l  store ptr %0, ptr %7, align 8\l  store i32 %1, ptr %8, align 4\l  store i32 %2, ptr %9, align 4\l  store double %3, ptr %10, align 8\l  store double %4, ptr %11, align 8\l  store ptr %5, ptr %12, align 8\l  %14 = load ptr, ptr %7, align 8\l  %15 = icmp eq ptr %14, null\l  br i1 %15, label %16, label %18\l|{<s0>T|<s1>F}}"];
	Node0x60000316a030:s0 -> Node0x60000316a080[tooltip="6 -> 16\nProbability 37.50%" ];
	Node0x60000316a030:s1 -> Node0x60000316a0d0[tooltip="6 -> 18\nProbability 62.50%" ];
	Node0x60000316a080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170" fontname="Courier",label="{16:\l|  %17 = call i32 @ev_err(ptr noundef @.str, i32 noundef 8, i32 noundef 77,\l... ptr noundef @.str.1, i32 noundef 0)\l  br label %18\l}"];
	Node0x60000316a080 -> Node0x60000316a0d0[tooltip="16 -> 18\nProbability 100.00%" ];
	Node0x60000316a0d0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{18:\l|  %19 = load i32, ptr %8, align 4\l  %20 = load ptr, ptr %7, align 8\l  %21 = getelementptr inbounds %struct.VEC, ptr %20, i32 0, i32 0\l  %22 = load i32, ptr %21, align 8\l  %23 = icmp uge i32 %19, %22\l  br i1 %23, label %30, label %24\l|{<s0>T|<s1>F}}"];
	Node0x60000316a0d0:s0 -> Node0x60000316a170[tooltip="18 -> 30\nProbability 50.00%" ];
	Node0x60000316a0d0:s1 -> Node0x60000316a120[tooltip="18 -> 24\nProbability 50.00%" ];
	Node0x60000316a120 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#be242e70" fontname="Courier",label="{24:\l|  %25 = load i32, ptr %9, align 4\l  %26 = load ptr, ptr %7, align 8\l  %27 = getelementptr inbounds %struct.VEC, ptr %26, i32 0, i32 0\l  %28 = load i32, ptr %27, align 8\l  %29 = icmp uge i32 %25, %28\l  br i1 %29, label %30, label %32\l|{<s0>T|<s1>F}}"];
	Node0x60000316a120:s0 -> Node0x60000316a170[tooltip="24 -> 30\nProbability 50.00%" ];
	Node0x60000316a120:s1 -> Node0x60000316a1c0[tooltip="24 -> 32\nProbability 50.00%" ];
	Node0x60000316a170 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70" fontname="Courier",label="{30:\l|  %31 = call i32 @ev_err(ptr noundef @.str, i32 noundef 10, i32 noundef 79,\l... ptr noundef @.str.1, i32 noundef 0)\l  br label %32\l}"];
	Node0x60000316a170 -> Node0x60000316a1c0[tooltip="30 -> 32\nProbability 100.00%" ];
	Node0x60000316a1c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{32:\l|  %33 = load ptr, ptr %7, align 8\l  %34 = load ptr, ptr %12, align 8\l  %35 = call ptr @_v_copy(ptr noundef %33, ptr noundef %34, i32 noundef 0)\l  store ptr %35, ptr %12, align 8\l  %36 = load double, ptr %10, align 8\l  %37 = load ptr, ptr %12, align 8\l  %38 = getelementptr inbounds %struct.VEC, ptr %37, i32 0, i32 2\l  %39 = load ptr, ptr %38, align 8\l  %40 = load i32, ptr %8, align 4\l  %41 = zext i32 %40 to i64\l  %42 = getelementptr inbounds double, ptr %39, i64 %41\l  %43 = load double, ptr %42, align 8\l  %44 = load double, ptr %11, align 8\l  %45 = load ptr, ptr %12, align 8\l  %46 = getelementptr inbounds %struct.VEC, ptr %45, i32 0, i32 2\l  %47 = load ptr, ptr %46, align 8\l  %48 = load i32, ptr %9, align 4\l  %49 = zext i32 %48 to i64\l  %50 = getelementptr inbounds double, ptr %47, i64 %49\l  %51 = load double, ptr %50, align 8\l  %52 = fmul double %44, %51\l  %53 = call double @llvm.fmuladd.f64(double %36, double %43, double %52)\l  store double %53, ptr %13, align 8\l  %54 = load double, ptr %11, align 8\l  %55 = fneg double %54\l  %56 = load ptr, ptr %12, align 8\l  %57 = getelementptr inbounds %struct.VEC, ptr %56, i32 0, i32 2\l  %58 = load ptr, ptr %57, align 8\l  %59 = load i32, ptr %8, align 4\l  %60 = zext i32 %59 to i64\l  %61 = getelementptr inbounds double, ptr %58, i64 %60\l  %62 = load double, ptr %61, align 8\l  %63 = load double, ptr %10, align 8\l  %64 = load ptr, ptr %12, align 8\l  %65 = getelementptr inbounds %struct.VEC, ptr %64, i32 0, i32 2\l  %66 = load ptr, ptr %65, align 8\l  %67 = load i32, ptr %9, align 4\l  %68 = zext i32 %67 to i64\l  %69 = getelementptr inbounds double, ptr %66, i64 %68\l  %70 = load double, ptr %69, align 8\l  %71 = fmul double %63, %70\l  %72 = call double @llvm.fmuladd.f64(double %55, double %62, double %71)\l  %73 = load ptr, ptr %12, align 8\l  %74 = getelementptr inbounds %struct.VEC, ptr %73, i32 0, i32 2\l  %75 = load ptr, ptr %74, align 8\l  %76 = load i32, ptr %9, align 4\l  %77 = zext i32 %76 to i64\l  %78 = getelementptr inbounds double, ptr %75, i64 %77\l  store double %72, ptr %78, align 8\l  %79 = load double, ptr %13, align 8\l  %80 = load ptr, ptr %12, align 8\l  %81 = getelementptr inbounds %struct.VEC, ptr %80, i32 0, i32 2\l  %82 = load ptr, ptr %81, align 8\l  %83 = load i32, ptr %8, align 4\l  %84 = zext i32 %83 to i64\l  %85 = getelementptr inbounds double, ptr %82, i64 %84\l  store double %79, ptr %85, align 8\l  %86 = load ptr, ptr %12, align 8\l  ret ptr %86\l}"];
}
