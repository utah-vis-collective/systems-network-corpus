digraph "CFG for 'rk4' function" {
	label="CFG for 'rk4' function";

	Node0x600000f36260 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{4:\l|  %5 = alloca ptr, align 8\l  %6 = alloca double, align 8\l  %7 = alloca ptr, align 8\l  %8 = alloca double, align 8\l  store ptr %0, ptr %5, align 8\l  store double %1, ptr %6, align 8\l  store ptr %2, ptr %7, align 8\l  store double %3, ptr %8, align 8\l  %9 = load ptr, ptr %7, align 8\l  %10 = icmp eq ptr %9, null\l  br i1 %10, label %11, label %13\l|{<s0>T|<s1>F}}"];
	Node0x600000f36260:s0 -> Node0x600000f362b0[tooltip="4 -> 11\nProbability 37.50%" ];
	Node0x600000f36260:s1 -> Node0x600000f36300[tooltip="4 -> 13\nProbability 62.50%" ];
	Node0x600000f362b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170" fontname="Courier",label="{11:\l|  %12 = call i32 @ev_err(ptr noundef @.str, i32 noundef 8, i32 noundef 45,\l... ptr noundef @.str.1, i32 noundef 0)\l  br label %13\l}"];
	Node0x600000f362b0 -> Node0x600000f36300[tooltip="11 -> 13\nProbability 100.00%" ];
	Node0x600000f36300 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{13:\l|  %14 = load ptr, ptr @rk4.v1, align 8\l  %15 = load ptr, ptr %7, align 8\l  %16 = getelementptr inbounds %struct.VEC, ptr %15, i32 0, i32 0\l  %17 = load i32, ptr %16, align 8\l  %18 = call ptr @v_resize(ptr noundef %14, i32 noundef %17)\l  store ptr %18, ptr @rk4.v1, align 8\l  %19 = load ptr, ptr @rk4.v2, align 8\l  %20 = load ptr, ptr %7, align 8\l  %21 = getelementptr inbounds %struct.VEC, ptr %20, i32 0, i32 0\l  %22 = load i32, ptr %21, align 8\l  %23 = call ptr @v_resize(ptr noundef %19, i32 noundef %22)\l  store ptr %23, ptr @rk4.v2, align 8\l  %24 = load ptr, ptr @rk4.v3, align 8\l  %25 = load ptr, ptr %7, align 8\l  %26 = getelementptr inbounds %struct.VEC, ptr %25, i32 0, i32 0\l  %27 = load i32, ptr %26, align 8\l  %28 = call ptr @v_resize(ptr noundef %24, i32 noundef %27)\l  store ptr %28, ptr @rk4.v3, align 8\l  %29 = load ptr, ptr @rk4.v4, align 8\l  %30 = load ptr, ptr %7, align 8\l  %31 = getelementptr inbounds %struct.VEC, ptr %30, i32 0, i32 0\l  %32 = load i32, ptr %31, align 8\l  %33 = call ptr @v_resize(ptr noundef %29, i32 noundef %32)\l  store ptr %33, ptr @rk4.v4, align 8\l  %34 = load ptr, ptr @rk4.temp, align 8\l  %35 = load ptr, ptr %7, align 8\l  %36 = getelementptr inbounds %struct.VEC, ptr %35, i32 0, i32 0\l  %37 = load i32, ptr %36, align 8\l  %38 = call ptr @v_resize(ptr noundef %34, i32 noundef %37)\l  store ptr %38, ptr @rk4.temp, align 8\l  %39 = call i32 @mem_stat_reg_list(ptr noundef @rk4.v1, i32 noundef 3, i32\l... noundef 0, ptr noundef @.str, i32 noundef 55)\l  %40 = call i32 @mem_stat_reg_list(ptr noundef @rk4.v2, i32 noundef 3, i32\l... noundef 0, ptr noundef @.str, i32 noundef 56)\l  %41 = call i32 @mem_stat_reg_list(ptr noundef @rk4.v3, i32 noundef 3, i32\l... noundef 0, ptr noundef @.str, i32 noundef 57)\l  %42 = call i32 @mem_stat_reg_list(ptr noundef @rk4.v4, i32 noundef 3, i32\l... noundef 0, ptr noundef @.str, i32 noundef 58)\l  %43 = call i32 @mem_stat_reg_list(ptr noundef @rk4.temp, i32 noundef 3, i32\l... noundef 0, ptr noundef @.str, i32 noundef 59)\l  %44 = load ptr, ptr %5, align 8\l  %45 = load double, ptr %6, align 8\l  %46 = load ptr, ptr %7, align 8\l  %47 = load ptr, ptr @rk4.v1, align 8\l  %48 = call ptr %44(double noundef %45, ptr noundef %46, ptr noundef %47)\l  %49 = load ptr, ptr %7, align 8\l  %50 = load ptr, ptr @rk4.v1, align 8\l  %51 = load double, ptr %8, align 8\l  %52 = fmul double 5.000000e-01, %51\l  %53 = load ptr, ptr @rk4.temp, align 8\l  %54 = call ptr @v_mltadd(ptr noundef %49, ptr noundef %50, double noundef\l... %52, ptr noundef %53)\l  %55 = load ptr, ptr %5, align 8\l  %56 = load double, ptr %6, align 8\l  %57 = load double, ptr %8, align 8\l  %58 = call double @llvm.fmuladd.f64(double 5.000000e-01, double %57, double\l... %56)\l  %59 = load ptr, ptr @rk4.temp, align 8\l  %60 = load ptr, ptr @rk4.v2, align 8\l  %61 = call ptr %55(double noundef %58, ptr noundef %59, ptr noundef %60)\l  %62 = load ptr, ptr %7, align 8\l  %63 = load ptr, ptr @rk4.v2, align 8\l  %64 = load double, ptr %8, align 8\l  %65 = fmul double 5.000000e-01, %64\l  %66 = load ptr, ptr @rk4.temp, align 8\l  %67 = call ptr @v_mltadd(ptr noundef %62, ptr noundef %63, double noundef\l... %65, ptr noundef %66)\l  %68 = load ptr, ptr %5, align 8\l  %69 = load double, ptr %6, align 8\l  %70 = load double, ptr %8, align 8\l  %71 = call double @llvm.fmuladd.f64(double 5.000000e-01, double %70, double\l... %69)\l  %72 = load ptr, ptr @rk4.temp, align 8\l  %73 = load ptr, ptr @rk4.v3, align 8\l  %74 = call ptr %68(double noundef %71, ptr noundef %72, ptr noundef %73)\l  %75 = load ptr, ptr %7, align 8\l  %76 = load ptr, ptr @rk4.v3, align 8\l  %77 = load double, ptr %8, align 8\l  %78 = load ptr, ptr @rk4.temp, align 8\l  %79 = call ptr @v_mltadd(ptr noundef %75, ptr noundef %76, double noundef\l... %77, ptr noundef %78)\l  %80 = load ptr, ptr %5, align 8\l  %81 = load double, ptr %6, align 8\l  %82 = load double, ptr %8, align 8\l  %83 = fadd double %81, %82\l  %84 = load ptr, ptr @rk4.temp, align 8\l  %85 = load ptr, ptr @rk4.v4, align 8\l  %86 = call ptr %80(double noundef %83, ptr noundef %84, ptr noundef %85)\l  %87 = load ptr, ptr @rk4.v1, align 8\l  %88 = load ptr, ptr @rk4.temp, align 8\l  %89 = call ptr @_v_copy(ptr noundef %87, ptr noundef %88, i32 noundef 0)\l  %90 = load ptr, ptr @rk4.temp, align 8\l  %91 = load ptr, ptr @rk4.v2, align 8\l  %92 = load ptr, ptr @rk4.temp, align 8\l  %93 = call ptr @v_mltadd(ptr noundef %90, ptr noundef %91, double noundef\l... 2.000000e+00, ptr noundef %92)\l  %94 = load ptr, ptr @rk4.temp, align 8\l  %95 = load ptr, ptr @rk4.v3, align 8\l  %96 = load ptr, ptr @rk4.temp, align 8\l  %97 = call ptr @v_mltadd(ptr noundef %94, ptr noundef %95, double noundef\l... 2.000000e+00, ptr noundef %96)\l  %98 = load ptr, ptr @rk4.temp, align 8\l  %99 = load ptr, ptr @rk4.v4, align 8\l  %100 = load ptr, ptr @rk4.temp, align 8\l  %101 = call ptr @v_add(ptr noundef %98, ptr noundef %99, ptr noundef %100)\l  %102 = load ptr, ptr %7, align 8\l  %103 = load ptr, ptr @rk4.temp, align 8\l  %104 = load double, ptr %8, align 8\l  %105 = fdiv double %104, 6.000000e+00\l  %106 = load ptr, ptr %7, align 8\l  %107 = call ptr @v_mltadd(ptr noundef %102, ptr noundef %103, double noundef\l... %105, ptr noundef %106)\l  %108 = load double, ptr %6, align 8\l  %109 = load double, ptr %8, align 8\l  %110 = fadd double %108, %109\l  ret double %110\l}"];
}
