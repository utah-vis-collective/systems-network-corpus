digraph "CFG for 'dct32' function" {
	label="CFG for 'dct32' function";

	Node0x6000013a70c0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{4:\l|  %5 = alloca ptr, align 8\l  %6 = alloca i32, align 4\l  %7 = alloca ptr, align 8\l  %8 = alloca ptr, align 8\l  %9 = alloca i64, align 8\l  %10 = alloca i64, align 8\l  %11 = alloca i64, align 8\l  %12 = alloca i64, align 8\l  %13 = alloca i64, align 8\l  %14 = alloca i64, align 8\l  %15 = alloca i64, align 8\l  %16 = alloca i64, align 8\l  %17 = alloca i64, align 8\l  %18 = alloca i64, align 8\l  %19 = alloca i64, align 8\l  %20 = alloca i64, align 8\l  %21 = alloca i64, align 8\l  %22 = alloca i64, align 8\l  %23 = alloca i64, align 8\l  %24 = alloca i64, align 8\l  %25 = alloca i64, align 8\l  %26 = alloca i64, align 8\l  %27 = alloca i64, align 8\l  %28 = alloca i64, align 8\l  %29 = alloca i64, align 8\l  %30 = alloca i64, align 8\l  %31 = alloca i64, align 8\l  %32 = alloca i64, align 8\l  %33 = alloca i64, align 8\l  %34 = alloca i64, align 8\l  %35 = alloca i64, align 8\l  %36 = alloca i64, align 8\l  %37 = alloca i64, align 8\l  %38 = alloca i64, align 8\l  %39 = alloca i64, align 8\l  %40 = alloca i64, align 8\l  %41 = alloca i64, align 8\l  %42 = alloca i64, align 8\l  %43 = alloca i64, align 8\l  %44 = alloca i64, align 8\l  %45 = alloca i64, align 8\l  %46 = alloca i64, align 8\l  %47 = alloca i64, align 8\l  %48 = alloca i64, align 8\l  %49 = alloca i64, align 8\l  %50 = alloca i64, align 8\l  %51 = alloca i64, align 8\l  %52 = alloca i64, align 8\l  %53 = alloca i64, align 8\l  %54 = alloca i64, align 8\l  %55 = alloca i64, align 8\l  %56 = alloca i64, align 8\l  %57 = alloca i64, align 8\l  %58 = alloca i64, align 8\l  %59 = alloca i64, align 8\l  %60 = alloca i64, align 8\l  %61 = alloca i64, align 8\l  %62 = alloca i64, align 8\l  %63 = alloca i64, align 8\l  %64 = alloca i64, align 8\l  %65 = alloca i64, align 8\l  %66 = alloca i64, align 8\l  %67 = alloca i64, align 8\l  %68 = alloca i64, align 8\l  %69 = alloca i64, align 8\l  %70 = alloca i64, align 8\l  %71 = alloca i64, align 8\l  %72 = alloca i64, align 8\l  %73 = alloca i64, align 8\l  %74 = alloca i64, align 8\l  %75 = alloca i64, align 8\l  %76 = alloca i64, align 8\l  %77 = alloca i64, align 8\l  %78 = alloca i64, align 8\l  %79 = alloca i64, align 8\l  %80 = alloca i64, align 8\l  %81 = alloca i64, align 8\l  %82 = alloca i64, align 8\l  %83 = alloca i64, align 8\l  %84 = alloca i64, align 8\l  %85 = alloca i64, align 8\l  %86 = alloca i64, align 8\l  %87 = alloca i64, align 8\l  %88 = alloca i64, align 8\l  %89 = alloca i64, align 8\l  %90 = alloca i64, align 8\l  %91 = alloca i64, align 8\l  %92 = alloca i64, align 8\l  %93 = alloca i64, align 8\l  %94 = alloca i64, align 8\l  %95 = alloca i64, align 8\l  %96 = alloca i64, align 8\l  %97 = alloca i64, align 8\l  %98 = alloca i64, align 8\l  %99 = alloca i64, align 8\l  %100 = alloca i64, align 8\l  %101 = alloca i64, align 8\l  %102 = alloca i64, align 8\l  %103 = alloca i64, align 8\l  %104 = alloca i64, align 8\l  %105 = alloca i64, align 8\l  %106 = alloca i64, align 8\l  %107 = alloca i64, align 8\l  %108 = alloca i64, align 8\l  %109 = alloca i64, align 8\l  %110 = alloca i64, align 8\l  %111 = alloca i64, align 8\l  %112 = alloca i64, align 8\l  %113 = alloca i64, align 8\l  %114 = alloca i64, align 8\l  %115 = alloca i64, align 8\l  %116 = alloca i64, align 8\l  %117 = alloca i64, align 8\l  %118 = alloca i64, align 8\l  %119 = alloca i64, align 8\l  %120 = alloca i64, align 8\l  %121 = alloca i64, align 8\l  %122 = alloca i64, align 8\l  %123 = alloca i64, align 8\l  %124 = alloca i64, align 8\l  %125 = alloca i64, align 8\l  %126 = alloca i64, align 8\l  %127 = alloca i64, align 8\l  %128 = alloca i64, align 8\l  %129 = alloca i64, align 8\l  %130 = alloca i64, align 8\l  %131 = alloca i64, align 8\l  %132 = alloca i64, align 8\l  %133 = alloca i64, align 8\l  %134 = alloca i64, align 8\l  %135 = alloca i64, align 8\l  %136 = alloca i64, align 8\l  %137 = alloca i64, align 8\l  %138 = alloca i64, align 8\l  %139 = alloca i64, align 8\l  %140 = alloca i64, align 8\l  %141 = alloca i64, align 8\l  %142 = alloca i64, align 8\l  %143 = alloca i64, align 8\l  %144 = alloca i64, align 8\l  %145 = alloca i64, align 8\l  %146 = alloca i64, align 8\l  %147 = alloca i64, align 8\l  %148 = alloca i64, align 8\l  %149 = alloca i64, align 8\l  %150 = alloca i64, align 8\l  %151 = alloca i64, align 8\l  %152 = alloca i64, align 8\l  %153 = alloca i64, align 8\l  %154 = alloca i64, align 8\l  %155 = alloca i64, align 8\l  %156 = alloca i64, align 8\l  %157 = alloca i64, align 8\l  %158 = alloca i64, align 8\l  %159 = alloca i64, align 8\l  %160 = alloca i64, align 8\l  %161 = alloca i64, align 8\l  %162 = alloca i64, align 8\l  %163 = alloca i64, align 8\l  %164 = alloca i64, align 8\l  %165 = alloca i64, align 8\l  %166 = alloca i64, align 8\l  %167 = alloca i64, align 8\l  %168 = alloca i64, align 8\l  %169 = alloca i64, align 8\l  %170 = alloca i64, align 8\l  %171 = alloca i64, align 8\l  %172 = alloca i64, align 8\l  %173 = alloca i64, align 8\l  %174 = alloca i64, align 8\l  %175 = alloca i64, align 8\l  %176 = alloca i64, align 8\l  %177 = alloca i64, align 8\l  %178 = alloca i64, align 8\l  %179 = alloca i64, align 8\l  %180 = alloca i64, align 8\l  %181 = alloca i64, align 8\l  %182 = alloca i64, align 8\l  %183 = alloca i64, align 8\l  %184 = alloca i64, align 8\l  %185 = alloca i64, align 8\l  %186 = alloca i64, align 8\l  %187 = alloca i64, align 8\l  %188 = alloca i64, align 8\l  %189 = alloca i64, align 8\l  %190 = alloca i64, align 8\l  %191 = alloca i64, align 8\l  %192 = alloca i64, align 8\l  %193 = alloca i64, align 8\l  %194 = alloca i64, align 8\l  %195 = alloca i64, align 8\l  %196 = alloca i64, align 8\l  %197 = alloca i64, align 8\l  %198 = alloca i64, align 8\l  %199 = alloca i64, align 8\l  %200 = alloca i64, align 8\l  %201 = alloca i64, align 8\l  %202 = alloca i64, align 8\l  %203 = alloca i64, align 8\l  %204 = alloca i64, align 8\l  %205 = alloca i64, align 8\l  %206 = alloca i64, align 8\l  %207 = alloca i64, align 8\l  %208 = alloca i64, align 8\l  %209 = alloca i64, align 8\l  %210 = alloca i64, align 8\l  %211 = alloca i64, align 8\l  %212 = alloca i64, align 8\l  %213 = alloca i64, align 8\l  %214 = alloca i64, align 8\l  %215 = alloca i64, align 8\l  %216 = alloca i64, align 8\l  %217 = alloca i64, align 8\l  %218 = alloca i64, align 8\l  %219 = alloca i64, align 8\l  %220 = alloca i64, align 8\l  %221 = alloca i64, align 8\l  %222 = alloca i64, align 8\l  %223 = alloca i64, align 8\l  %224 = alloca i64, align 8\l  %225 = alloca i64, align 8\l  %226 = alloca i64, align 8\l  %227 = alloca i64, align 8\l  %228 = alloca i64, align 8\l  %229 = alloca i64, align 8\l  %230 = alloca i64, align 8\l  %231 = alloca i64, align 8\l  %232 = alloca i64, align 8\l  %233 = alloca i64, align 8\l  %234 = alloca i64, align 8\l  %235 = alloca i64, align 8\l  %236 = alloca i64, align 8\l  %237 = alloca i64, align 8\l  %238 = alloca i64, align 8\l  %239 = alloca i64, align 8\l  %240 = alloca i64, align 8\l  %241 = alloca i64, align 8\l  %242 = alloca i64, align 8\l  %243 = alloca i64, align 8\l  %244 = alloca i64, align 8\l  %245 = alloca i64, align 8\l  %246 = alloca i64, align 8\l  %247 = alloca i64, align 8\l  %248 = alloca i64, align 8\l  %249 = alloca i64, align 8\l  %250 = alloca i64, align 8\l  %251 = alloca i64, align 8\l  %252 = alloca i64, align 8\l  %253 = alloca i64, align 8\l  %254 = alloca i64, align 8\l  %255 = alloca i64, align 8\l  %256 = alloca i64, align 8\l  %257 = alloca i64, align 8\l  %258 = alloca i64, align 8\l  %259 = alloca i64, align 8\l  %260 = alloca i64, align 8\l  %261 = alloca i64, align 8\l  %262 = alloca i64, align 8\l  %263 = alloca i64, align 8\l  %264 = alloca i64, align 8\l  %265 = alloca i64, align 8\l  %266 = alloca i64, align 8\l  %267 = alloca i64, align 8\l  %268 = alloca i64, align 8\l  %269 = alloca i64, align 8\l  %270 = alloca i64, align 8\l  %271 = alloca i64, align 8\l  %272 = alloca i64, align 8\l  %273 = alloca i64, align 8\l  %274 = alloca i64, align 8\l  %275 = alloca i64, align 8\l  %276 = alloca i64, align 8\l  %277 = alloca i64, align 8\l  %278 = alloca i64, align 8\l  %279 = alloca i64, align 8\l  %280 = alloca i64, align 8\l  %281 = alloca i64, align 8\l  %282 = alloca i64, align 8\l  %283 = alloca i64, align 8\l  %284 = alloca i64, align 8\l  %285 = alloca i64, align 8\l  %286 = alloca i64, align 8\l  %287 = alloca i64, align 8\l  %288 = alloca i64, align 8\l  %289 = alloca i64, align 8\l  %290 = alloca i64, align 8\l  %291 = alloca i64, align 8\l  %292 = alloca i64, align 8\l  %293 = alloca i64, align 8\l  %294 = alloca i64, align 8\l  %295 = alloca i64, align 8\l  %296 = alloca i64, align 8\l  %297 = alloca i64, align 8\l  %298 = alloca i64, align 8\l  %299 = alloca i64, align 8\l  %300 = alloca i64, align 8\l  %301 = alloca i64, align 8\l  %302 = alloca i64, align 8\l  %303 = alloca i64, align 8\l  %304 = alloca i64, align 8\l  %305 = alloca i64, align 8\l  %306 = alloca i64, align 8\l  %307 = alloca i64, align 8\l  %308 = alloca i64, align 8\l  %309 = alloca i64, align 8\l  %310 = alloca i64, align 8\l  %311 = alloca i64, align 8\l  %312 = alloca i64, align 8\l  %313 = alloca i64, align 8\l  %314 = alloca i64, align 8\l  %315 = alloca i64, align 8\l  %316 = alloca i64, align 8\l  %317 = alloca i64, align 8\l  %318 = alloca i64, align 8\l  %319 = alloca i64, align 8\l  %320 = alloca i64, align 8\l  %321 = alloca i64, align 8\l  %322 = alloca i64, align 8\l  %323 = alloca i64, align 8\l  %324 = alloca i64, align 8\l  %325 = alloca i64, align 8\l  %326 = alloca i64, align 8\l  %327 = alloca i64, align 8\l  %328 = alloca i64, align 8\l  %329 = alloca i64, align 8\l  %330 = alloca i64, align 8\l  %331 = alloca i64, align 8\l  %332 = alloca i64, align 8\l  %333 = alloca i64, align 8\l  %334 = alloca i64, align 8\l  %335 = alloca i64, align 8\l  %336 = alloca i64, align 8\l  %337 = alloca i64, align 8\l  %338 = alloca i64, align 8\l  %339 = alloca i64, align 8\l  %340 = alloca i64, align 8\l  %341 = alloca i64, align 8\l  %342 = alloca i64, align 8\l  %343 = alloca i64, align 8\l  %344 = alloca i64, align 8\l  %345 = alloca i64, align 8\l  %346 = alloca i64, align 8\l  %347 = alloca i64, align 8\l  %348 = alloca i64, align 8\l  %349 = alloca i64, align 8\l  %350 = alloca i64, align 8\l  %351 = alloca i64, align 8\l  %352 = alloca i64, align 8\l  %353 = alloca i64, align 8\l  %354 = alloca i64, align 8\l  %355 = alloca i64, align 8\l  %356 = alloca i64, align 8\l  %357 = alloca i64, align 8\l  %358 = alloca i64, align 8\l  %359 = alloca i64, align 8\l  %360 = alloca i64, align 8\l  %361 = alloca i64, align 8\l  %362 = alloca i64, align 8\l  %363 = alloca i64, align 8\l  %364 = alloca i64, align 8\l  %365 = alloca i64, align 8\l  %366 = alloca i64, align 8\l  %367 = alloca i64, align 8\l  %368 = alloca i64, align 8\l  %369 = alloca i64, align 8\l  %370 = alloca i64, align 8\l  %371 = alloca i64, align 8\l  %372 = alloca i64, align 8\l  %373 = alloca i64, align 8\l  %374 = alloca i64, align 8\l  %375 = alloca i64, align 8\l  %376 = alloca i64, align 8\l  %377 = alloca i64, align 8\l  %378 = alloca i64, align 8\l  %379 = alloca i64, align 8\l  %380 = alloca i64, align 8\l  %381 = alloca i64, align 8\l  %382 = alloca i64, align 8\l  %383 = alloca i64, align 8\l  %384 = alloca i64, align 8\l  %385 = alloca i64, align 8\l  %386 = alloca i64, align 8\l  %387 = alloca i64, align 8\l  %388 = alloca i64, align 8\l  %389 = alloca i64, align 8\l  %390 = alloca i64, align 8\l  %391 = alloca i64, align 8\l  %392 = alloca i64, align 8\l  %393 = alloca i64, align 8\l  %394 = alloca i64, align 8\l  %395 = alloca i64, align 8\l  %396 = alloca i64, align 8\l  %397 = alloca i64, align 8\l  %398 = alloca i64, align 8\l  %399 = alloca i64, align 8\l  %400 = alloca i64, align 8\l  %401 = alloca i64, align 8\l  %402 = alloca i64, align 8\l  %403 = alloca i64, align 8\l  %404 = alloca i64, align 8\l  %405 = alloca i64, align 8\l  %406 = alloca i64, align 8\l  %407 = alloca i64, align 8\l  %408 = alloca i64, align 8\l  %409 = alloca i64, align 8\l  %410 = alloca i64, align 8\l  %411 = alloca i64, align 8\l  %412 = alloca i64, align 8\l  %413 = alloca i64, align 8\l  %414 = alloca i64, align 8\l  %415 = alloca i64, align 8\l  %416 = alloca i64, align 8\l  %417 = alloca i64, align 8\l  %418 = alloca i64, align 8\l  %419 = alloca i64, align 8\l  %420 = alloca i64, align 8\l  %421 = alloca i64, align 8\l  %422 = alloca i64, align 8\l  %423 = alloca i64, align 8\l  %424 = alloca i64, align 8\l  %425 = alloca i64, align 8\l  store ptr %0, ptr %5, align 8\l  store i32 %1, ptr %6, align 4\l  store ptr %2, ptr %7, align 8\l  store ptr %3, ptr %8, align 8\l  %426 = load ptr, ptr %5, align 8\l  %427 = getelementptr inbounds i64, ptr %426, i64 0\l  %428 = load i64, ptr %427, align 8\l  %429 = load ptr, ptr %5, align 8\l  %430 = getelementptr inbounds i64, ptr %429, i64 31\l  %431 = load i64, ptr %430, align 8\l  %432 = add nsw i64 %428, %431\l  store i64 %432, ptr %9, align 8\l  %433 = load i64, ptr %186, align 8\l  %434 = load i64, ptr %187, align 8\l  %435 = load ptr, ptr %5, align 8\l  %436 = getelementptr inbounds i64, ptr %435, i64 0\l  %437 = load i64, ptr %436, align 8\l  %438 = load ptr, ptr %5, align 8\l  %439 = getelementptr inbounds i64, ptr %438, i64 31\l  %440 = load i64, ptr %439, align 8\l  %441 = sub nsw i64 %437, %440\l  %442 = call i32 @MAD_F_MLX(i64 noundef %433, i64 noundef %434, i64 noundef\l... %441, i64 noundef 268112114)\l  %443 = load i64, ptr %186, align 8\l  %444 = shl i64 %443, 4\l  %445 = load i64, ptr %187, align 8\l  %446 = lshr i64 %445, 28\l  %447 = or i64 %444, %446\l  store i64 %447, ptr %188, align 8\l  %448 = load i64, ptr %188, align 8\l  store i64 %448, ptr %25, align 8\l  %449 = load ptr, ptr %5, align 8\l  %450 = getelementptr inbounds i64, ptr %449, i64 15\l  %451 = load i64, ptr %450, align 8\l  %452 = load ptr, ptr %5, align 8\l  %453 = getelementptr inbounds i64, ptr %452, i64 16\l  %454 = load i64, ptr %453, align 8\l  %455 = add nsw i64 %451, %454\l  store i64 %455, ptr %10, align 8\l  %456 = load i64, ptr %189, align 8\l  %457 = load i64, ptr %190, align 8\l  %458 = load ptr, ptr %5, align 8\l  %459 = getelementptr inbounds i64, ptr %458, i64 15\l  %460 = load i64, ptr %459, align 8\l  %461 = load ptr, ptr %5, align 8\l  %462 = getelementptr inbounds i64, ptr %461, i64 16\l  %463 = load i64, ptr %462, align 8\l  %464 = sub nsw i64 %460, %463\l  %465 = call i32 @MAD_F_MLX(i64 noundef %456, i64 noundef %457, i64 noundef\l... %464, i64 noundef 13171504)\l  %466 = load i64, ptr %189, align 8\l  %467 = shl i64 %466, 4\l  %468 = load i64, ptr %190, align 8\l  %469 = lshr i64 %468, 28\l  %470 = or i64 %467, %469\l  store i64 %470, ptr %191, align 8\l  %471 = load i64, ptr %191, align 8\l  store i64 %471, ptr %26, align 8\l  %472 = load i64, ptr %25, align 8\l  %473 = load i64, ptr %26, align 8\l  %474 = add nsw i64 %472, %473\l  store i64 %474, ptr %50, align 8\l  %475 = load i64, ptr %192, align 8\l  %476 = load i64, ptr %193, align 8\l  %477 = load i64, ptr %25, align 8\l  %478 = load i64, ptr %26, align 8\l  %479 = sub nsw i64 %477, %478\l  %480 = call i32 @MAD_F_MLX(i64 noundef %475, i64 noundef %476, i64 noundef\l... %479, i64 noundef 267142866)\l  %481 = load i64, ptr %192, align 8\l  %482 = shl i64 %481, 4\l  %483 = load i64, ptr %193, align 8\l  %484 = lshr i64 %483, 28\l  %485 = or i64 %482, %484\l  store i64 %485, ptr %194, align 8\l  %486 = load i64, ptr %194, align 8\l  store i64 %486, ptr %68, align 8\l  %487 = load i64, ptr %9, align 8\l  %488 = load i64, ptr %10, align 8\l  %489 = add nsw i64 %487, %488\l  store i64 %489, ptr %42, align 8\l  %490 = load i64, ptr %195, align 8\l  %491 = load i64, ptr %196, align 8\l  %492 = load i64, ptr %9, align 8\l  %493 = load i64, ptr %10, align 8\l  %494 = sub nsw i64 %492, %493\l  %495 = call i32 @MAD_F_MLX(i64 noundef %490, i64 noundef %491, i64 noundef\l... %494, i64 noundef 267142866)\l  %496 = load i64, ptr %195, align 8\l  %497 = shl i64 %496, 4\l  %498 = load i64, ptr %196, align 8\l  %499 = lshr i64 %498, 28\l  %500 = or i64 %497, %499\l  store i64 %500, ptr %197, align 8\l  %501 = load i64, ptr %197, align 8\l  store i64 %501, ptr %59, align 8\l  %502 = load ptr, ptr %5, align 8\l  %503 = getelementptr inbounds i64, ptr %502, i64 7\l  %504 = load i64, ptr %503, align 8\l  %505 = load ptr, ptr %5, align 8\l  %506 = getelementptr inbounds i64, ptr %505, i64 24\l  %507 = load i64, ptr %506, align 8\l  %508 = add nsw i64 %504, %507\l  store i64 %508, ptr %11, align 8\l  %509 = load i64, ptr %198, align 8\l  %510 = load i64, ptr %199, align 8\l  %511 = load ptr, ptr %5, align 8\l  %512 = getelementptr inbounds i64, ptr %511, i64 7\l  %513 = load i64, ptr %512, align 8\l  %514 = load ptr, ptr %5, align 8\l  %515 = getelementptr inbounds i64, ptr %514, i64 24\l  %516 = load i64, ptr %515, align 8\l  %517 = sub nsw i64 %513, %516\l  %518 = call i32 @MAD_F_MLX(i64 noundef %509, i64 noundef %510, i64 noundef\l... %517, i64 noundef 198897553)\l  %519 = load i64, ptr %198, align 8\l  %520 = shl i64 %519, 4\l  %521 = load i64, ptr %199, align 8\l  %522 = lshr i64 %521, 28\l  %523 = or i64 %520, %522\l  store i64 %523, ptr %200, align 8\l  %524 = load i64, ptr %200, align 8\l  store i64 %524, ptr %27, align 8\l  %525 = load ptr, ptr %5, align 8\l  %526 = getelementptr inbounds i64, ptr %525, i64 8\l  %527 = load i64, ptr %526, align 8\l  %528 = load ptr, ptr %5, align 8\l  %529 = getelementptr inbounds i64, ptr %528, i64 23\l  %530 = load i64, ptr %529, align 8\l  %531 = add nsw i64 %527, %530\l  store i64 %531, ptr %12, align 8\l  %532 = load i64, ptr %201, align 8\l  %533 = load i64, ptr %202, align 8\l  %534 = load ptr, ptr %5, align 8\l  %535 = getelementptr inbounds i64, ptr %534, i64 8\l  %536 = load i64, ptr %535, align 8\l  %537 = load ptr, ptr %5, align 8\l  %538 = getelementptr inbounds i64, ptr %537, i64 23\l  %539 = load i64, ptr %538, align 8\l  %540 = sub nsw i64 %536, %539\l  %541 = call i32 @MAD_F_MLX(i64 noundef %532, i64 noundef %533, i64 noundef\l... %540, i64 noundef 180270234)\l  %542 = load i64, ptr %201, align 8\l  %543 = shl i64 %542, 4\l  %544 = load i64, ptr %202, align 8\l  %545 = lshr i64 %544, 28\l  %546 = or i64 %543, %545\l  store i64 %546, ptr %203, align 8\l  %547 = load i64, ptr %203, align 8\l  store i64 %547, ptr %28, align 8\l  %548 = load i64, ptr %27, align 8\l  %549 = load i64, ptr %28, align 8\l  %550 = add nsw i64 %548, %549\l  store i64 %550, ptr %51, align 8\l  %551 = load i64, ptr %204, align 8\l  %552 = load i64, ptr %205, align 8\l  %553 = load i64, ptr %27, align 8\l  %554 = load i64, ptr %28, align 8\l  %555 = sub nsw i64 %553, %554\l  %556 = call i32 @MAD_F_MLX(i64 noundef %551, i64 noundef %552, i64 noundef\l... %555, i64 noundef 26311276)\l  %557 = load i64, ptr %204, align 8\l  %558 = shl i64 %557, 4\l  %559 = load i64, ptr %205, align 8\l  %560 = lshr i64 %559, 28\l  %561 = or i64 %558, %560\l  store i64 %561, ptr %206, align 8\l  %562 = load i64, ptr %206, align 8\l  store i64 %562, ptr %69, align 8\l  %563 = load i64, ptr %11, align 8\l  %564 = load i64, ptr %12, align 8\l  %565 = add nsw i64 %563, %564\l  store i64 %565, ptr %43, align 8\l  %566 = load i64, ptr %207, align 8\l  %567 = load i64, ptr %208, align 8\l  %568 = load i64, ptr %11, align 8\l  %569 = load i64, ptr %12, align 8\l  %570 = sub nsw i64 %568, %569\l  %571 = call i32 @MAD_F_MLX(i64 noundef %566, i64 noundef %567, i64 noundef\l... %570, i64 noundef 26311276)\l  %572 = load i64, ptr %207, align 8\l  %573 = shl i64 %572, 4\l  %574 = load i64, ptr %208, align 8\l  %575 = lshr i64 %574, 28\l  %576 = or i64 %573, %575\l  store i64 %576, ptr %209, align 8\l  %577 = load i64, ptr %209, align 8\l  store i64 %577, ptr %60, align 8\l  %578 = load ptr, ptr %5, align 8\l  %579 = getelementptr inbounds i64, ptr %578, i64 3\l  %580 = load i64, ptr %579, align 8\l  %581 = load ptr, ptr %5, align 8\l  %582 = getelementptr inbounds i64, ptr %581, i64 28\l  %583 = load i64, ptr %582, align 8\l  %584 = add nsw i64 %580, %583\l  store i64 %584, ptr %13, align 8\l  %585 = load i64, ptr %210, align 8\l  %586 = load i64, ptr %211, align 8\l  %587 = load ptr, ptr %5, align 8\l  %588 = getelementptr inbounds i64, ptr %587, i64 3\l  %589 = load i64, ptr %588, align 8\l  %590 = load ptr, ptr %5, align 8\l  %591 = getelementptr inbounds i64, ptr %590, i64 28\l  %592 = load i64, ptr %591, align 8\l  %593 = sub nsw i64 %589, %592\l  %594 = call i32 @MAD_F_MLX(i64 noundef %585, i64 noundef %586, i64 noundef\l... %593, i64 noundef 252743810)\l  %595 = load i64, ptr %210, align 8\l  %596 = shl i64 %595, 4\l  %597 = load i64, ptr %211, align 8\l  %598 = lshr i64 %597, 28\l  %599 = or i64 %596, %598\l  store i64 %599, ptr %212, align 8\l  %600 = load i64, ptr %212, align 8\l  store i64 %600, ptr %29, align 8\l  %601 = load ptr, ptr %5, align 8\l  %602 = getelementptr inbounds i64, ptr %601, i64 12\l  %603 = load i64, ptr %602, align 8\l  %604 = load ptr, ptr %5, align 8\l  %605 = getelementptr inbounds i64, ptr %604, i64 19\l  %606 = load i64, ptr %605, align 8\l  %607 = add nsw i64 %603, %606\l  store i64 %607, ptr %14, align 8\l  %608 = load i64, ptr %213, align 8\l  %609 = load i64, ptr %214, align 8\l  %610 = load ptr, ptr %5, align 8\l  %611 = getelementptr inbounds i64, ptr %610, i64 12\l  %612 = load i64, ptr %611, align 8\l  %613 = load ptr, ptr %5, align 8\l  %614 = getelementptr inbounds i64, ptr %613, i64 19\l  %615 = load i64, ptr %614, align 8\l  %616 = sub nsw i64 %612, %615\l  %617 = call i32 @MAD_F_MLX(i64 noundef %608, i64 noundef %609, i64 noundef\l... %616, i64 noundef 90433181)\l  %618 = load i64, ptr %213, align 8\l  %619 = shl i64 %618, 4\l  %620 = load i64, ptr %214, align 8\l  %621 = lshr i64 %620, 28\l  %622 = or i64 %619, %621\l  store i64 %622, ptr %215, align 8\l  %623 = load i64, ptr %215, align 8\l  store i64 %623, ptr %30, align 8\l  %624 = load i64, ptr %29, align 8\l  %625 = load i64, ptr %30, align 8\l  %626 = add nsw i64 %624, %625\l  store i64 %626, ptr %52, align 8\l  %627 = load i64, ptr %216, align 8\l  %628 = load i64, ptr %217, align 8\l  %629 = load i64, ptr %29, align 8\l  %630 = load i64, ptr %30, align 8\l  %631 = sub nsw i64 %629, %630\l  %632 = call i32 @MAD_F_MLX(i64 noundef %627, i64 noundef %628, i64 noundef\l... %631, i64 noundef 207503414)\l  %633 = load i64, ptr %216, align 8\l  %634 = shl i64 %633, 4\l  %635 = load i64, ptr %217, align 8\l  %636 = lshr i64 %635, 28\l  %637 = or i64 %634, %636\l  store i64 %637, ptr %218, align 8\l  %638 = load i64, ptr %218, align 8\l  store i64 %638, ptr %70, align 8\l  %639 = load i64, ptr %13, align 8\l  %640 = load i64, ptr %14, align 8\l  %641 = add nsw i64 %639, %640\l  store i64 %641, ptr %44, align 8\l  %642 = load i64, ptr %219, align 8\l  %643 = load i64, ptr %220, align 8\l  %644 = load i64, ptr %13, align 8\l  %645 = load i64, ptr %14, align 8\l  %646 = sub nsw i64 %644, %645\l  %647 = call i32 @MAD_F_MLX(i64 noundef %642, i64 noundef %643, i64 noundef\l... %646, i64 noundef 207503414)\l  %648 = load i64, ptr %219, align 8\l  %649 = shl i64 %648, 4\l  %650 = load i64, ptr %220, align 8\l  %651 = lshr i64 %650, 28\l  %652 = or i64 %649, %651\l  store i64 %652, ptr %221, align 8\l  %653 = load i64, ptr %221, align 8\l  store i64 %653, ptr %61, align 8\l  %654 = load ptr, ptr %5, align 8\l  %655 = getelementptr inbounds i64, ptr %654, i64 4\l  %656 = load i64, ptr %655, align 8\l  %657 = load ptr, ptr %5, align 8\l  %658 = getelementptr inbounds i64, ptr %657, i64 27\l  %659 = load i64, ptr %658, align 8\l  %660 = add nsw i64 %656, %659\l  store i64 %660, ptr %15, align 8\l  %661 = load i64, ptr %222, align 8\l  %662 = load i64, ptr %223, align 8\l  %663 = load ptr, ptr %5, align 8\l  %664 = getelementptr inbounds i64, ptr %663, i64 4\l  %665 = load i64, ptr %664, align 8\l  %666 = load ptr, ptr %5, align 8\l  %667 = getelementptr inbounds i64, ptr %666, i64 27\l  %668 = load i64, ptr %667, align 8\l  %669 = sub nsw i64 %665, %668\l  %670 = call i32 @MAD_F_MLX(i64 noundef %661, i64 noundef %662, i64 noundef\l... %669, i64 noundef 242662778)\l  %671 = load i64, ptr %222, align 8\l  %672 = shl i64 %671, 4\l  %673 = load i64, ptr %223, align 8\l  %674 = lshr i64 %673, 28\l  %675 = or i64 %672, %674\l  store i64 %675, ptr %224, align 8\l  %676 = load i64, ptr %224, align 8\l  store i64 %676, ptr %31, align 8\l  %677 = load ptr, ptr %5, align 8\l  %678 = getelementptr inbounds i64, ptr %677, i64 11\l  %679 = load i64, ptr %678, align 8\l  %680 = load ptr, ptr %5, align 8\l  %681 = getelementptr inbounds i64, ptr %680, i64 20\l  %682 = load i64, ptr %681, align 8\l  %683 = add nsw i64 %679, %682\l  store i64 %683, ptr %16, align 8\l  %684 = load i64, ptr %225, align 8\l  %685 = load i64, ptr %226, align 8\l  %686 = load ptr, ptr %5, align 8\l  %687 = getelementptr inbounds i64, ptr %686, i64 11\l  %688 = load i64, ptr %687, align 8\l  %689 = load ptr, ptr %5, align 8\l  %690 = getelementptr inbounds i64, ptr %689, i64 20\l  %691 = load i64, ptr %690, align 8\l  %692 = sub nsw i64 %688, %691\l  %693 = call i32 @MAD_F_MLX(i64 noundef %684, i64 noundef %685, i64 noundef\l... %692, i64 noundef 114770946)\l  %694 = load i64, ptr %225, align 8\l  %695 = shl i64 %694, 4\l  %696 = load i64, ptr %226, align 8\l  %697 = lshr i64 %696, 28\l  %698 = or i64 %695, %697\l  store i64 %698, ptr %227, align 8\l  %699 = load i64, ptr %227, align 8\l  store i64 %699, ptr %32, align 8\l  %700 = load i64, ptr %31, align 8\l  %701 = load i64, ptr %32, align 8\l  %702 = add nsw i64 %700, %701\l  store i64 %702, ptr %53, align 8\l  %703 = load i64, ptr %228, align 8\l  %704 = load i64, ptr %229, align 8\l  %705 = load i64, ptr %31, align 8\l  %706 = load i64, ptr %32, align 8\l  %707 = sub nsw i64 %705, %706\l  %708 = call i32 @MAD_F_MLX(i64 noundef %703, i64 noundef %704, i64 noundef\l... %707, i64 noundef 170293651)\l  %709 = load i64, ptr %228, align 8\l  %710 = shl i64 %709, 4\l  %711 = load i64, ptr %229, align 8\l  %712 = lshr i64 %711, 28\l  %713 = or i64 %710, %712\l  store i64 %713, ptr %230, align 8\l  %714 = load i64, ptr %230, align 8\l  store i64 %714, ptr %71, align 8\l  %715 = load i64, ptr %15, align 8\l  %716 = load i64, ptr %16, align 8\l  %717 = add nsw i64 %715, %716\l  store i64 %717, ptr %45, align 8\l  %718 = load i64, ptr %231, align 8\l  %719 = load i64, ptr %232, align 8\l  %720 = load i64, ptr %15, align 8\l  %721 = load i64, ptr %16, align 8\l  %722 = sub nsw i64 %720, %721\l  %723 = call i32 @MAD_F_MLX(i64 noundef %718, i64 noundef %719, i64 noundef\l... %722, i64 noundef 170293651)\l  %724 = load i64, ptr %231, align 8\l  %725 = shl i64 %724, 4\l  %726 = load i64, ptr %232, align 8\l  %727 = lshr i64 %726, 28\l  %728 = or i64 %725, %727\l  store i64 %728, ptr %233, align 8\l  %729 = load i64, ptr %233, align 8\l  store i64 %729, ptr %62, align 8\l  %730 = load ptr, ptr %5, align 8\l  %731 = getelementptr inbounds i64, ptr %730, i64 1\l  %732 = load i64, ptr %731, align 8\l  %733 = load ptr, ptr %5, align 8\l  %734 = getelementptr inbounds i64, ptr %733, i64 30\l  %735 = load i64, ptr %734, align 8\l  %736 = add nsw i64 %732, %735\l  store i64 %736, ptr %17, align 8\l  %737 = load i64, ptr %234, align 8\l  %738 = load i64, ptr %235, align 8\l  %739 = load ptr, ptr %5, align 8\l  %740 = getelementptr inbounds i64, ptr %739, i64 1\l  %741 = load i64, ptr %740, align 8\l  %742 = load ptr, ptr %5, align 8\l  %743 = getelementptr inbounds i64, ptr %742, i64 30\l  %744 = load i64, ptr %743, align 8\l  %745 = sub nsw i64 %741, %744\l  %746 = call i32 @MAD_F_MLX(i64 noundef %737, i64 noundef %738, i64 noundef\l... %745, i64 noundef 265530048)\l  %747 = load i64, ptr %234, align 8\l  %748 = shl i64 %747, 4\l  %749 = load i64, ptr %235, align 8\l  %750 = lshr i64 %749, 28\l  %751 = or i64 %748, %750\l  store i64 %751, ptr %236, align 8\l  %752 = load i64, ptr %236, align 8\l  store i64 %752, ptr %33, align 8\l  %753 = load ptr, ptr %5, align 8\l  %754 = getelementptr inbounds i64, ptr %753, i64 14\l  %755 = load i64, ptr %754, align 8\l  %756 = load ptr, ptr %5, align 8\l  %757 = getelementptr inbounds i64, ptr %756, i64 17\l  %758 = load i64, ptr %757, align 8\l  %759 = add nsw i64 %755, %758\l  store i64 %759, ptr %18, align 8\l  %760 = load i64, ptr %237, align 8\l  %761 = load i64, ptr %238, align 8\l  %762 = load ptr, ptr %5, align 8\l  %763 = getelementptr inbounds i64, ptr %762, i64 14\l  %764 = load i64, ptr %763, align 8\l  %765 = load ptr, ptr %5, align 8\l  %766 = getelementptr inbounds i64, ptr %765, i64 17\l  %767 = load i64, ptr %766, align 8\l  %768 = sub nsw i64 %764, %767\l  %769 = call i32 @MAD_F_MLX(i64 noundef %760, i64 noundef %761, i64 noundef\l... %768, i64 noundef 39387662)\l  %770 = load i64, ptr %237, align 8\l  %771 = shl i64 %770, 4\l  %772 = load i64, ptr %238, align 8\l  %773 = lshr i64 %772, 28\l  %774 = or i64 %771, %773\l  store i64 %774, ptr %239, align 8\l  %775 = load i64, ptr %239, align 8\l  store i64 %775, ptr %34, align 8\l  %776 = load i64, ptr %33, align 8\l  %777 = load i64, ptr %34, align 8\l  %778 = add nsw i64 %776, %777\l  store i64 %778, ptr %54, align 8\l  %779 = load i64, ptr %240, align 8\l  %780 = load i64, ptr %241, align 8\l  %781 = load i64, ptr %33, align 8\l  %782 = load i64, ptr %34, align 8\l  %783 = sub nsw i64 %781, %782\l  %784 = call i32 @MAD_F_MLX(i64 noundef %779, i64 noundef %780, i64 noundef\l... %783, i64 noundef 256876715)\l  %785 = load i64, ptr %240, align 8\l  %786 = shl i64 %785, 4\l  %787 = load i64, ptr %241, align 8\l  %788 = lshr i64 %787, 28\l  %789 = or i64 %786, %788\l  store i64 %789, ptr %242, align 8\l  %790 = load i64, ptr %242, align 8\l  store i64 %790, ptr %72, align 8\l  %791 = load i64, ptr %17, align 8\l  %792 = load i64, ptr %18, align 8\l  %793 = add nsw i64 %791, %792\l  store i64 %793, ptr %46, align 8\l  %794 = load i64, ptr %243, align 8\l  %795 = load i64, ptr %244, align 8\l  %796 = load i64, ptr %17, align 8\l  %797 = load i64, ptr %18, align 8\l  %798 = sub nsw i64 %796, %797\l  %799 = call i32 @MAD_F_MLX(i64 noundef %794, i64 noundef %795, i64 noundef\l... %798, i64 noundef 256876715)\l  %800 = load i64, ptr %243, align 8\l  %801 = shl i64 %800, 4\l  %802 = load i64, ptr %244, align 8\l  %803 = lshr i64 %802, 28\l  %804 = or i64 %801, %803\l  store i64 %804, ptr %245, align 8\l  %805 = load i64, ptr %245, align 8\l  store i64 %805, ptr %63, align 8\l  %806 = load ptr, ptr %5, align 8\l  %807 = getelementptr inbounds i64, ptr %806, i64 6\l  %808 = load i64, ptr %807, align 8\l  %809 = load ptr, ptr %5, align 8\l  %810 = getelementptr inbounds i64, ptr %809, i64 25\l  %811 = load i64, ptr %810, align 8\l  %812 = add nsw i64 %808, %811\l  store i64 %812, ptr %19, align 8\l  %813 = load i64, ptr %246, align 8\l  %814 = load i64, ptr %247, align 8\l  %815 = load ptr, ptr %5, align 8\l  %816 = getelementptr inbounds i64, ptr %815, i64 6\l  %817 = load i64, ptr %816, align 8\l  %818 = load ptr, ptr %5, align 8\l  %819 = getelementptr inbounds i64, ptr %818, i64 25\l  %820 = load i64, ptr %819, align 8\l  %821 = sub nsw i64 %817, %820\l  %822 = call i32 @MAD_F_MLX(i64 noundef %813, i64 noundef %814, i64 noundef\l... %821, i64 noundef 215609380)\l  %823 = load i64, ptr %246, align 8\l  %824 = shl i64 %823, 4\l  %825 = load i64, ptr %247, align 8\l  %826 = lshr i64 %825, 28\l  %827 = or i64 %824, %826\l  store i64 %827, ptr %248, align 8\l  %828 = load i64, ptr %248, align 8\l  store i64 %828, ptr %35, align 8\l  %829 = load ptr, ptr %5, align 8\l  %830 = getelementptr inbounds i64, ptr %829, i64 9\l  %831 = load i64, ptr %830, align 8\l  %832 = load ptr, ptr %5, align 8\l  %833 = getelementptr inbounds i64, ptr %832, i64 22\l  %834 = load i64, ptr %833, align 8\l  %835 = add nsw i64 %831, %834\l  store i64 %835, ptr %20, align 8\l  %836 = load i64, ptr %249, align 8\l  %837 = load i64, ptr %250, align 8\l  %838 = load ptr, ptr %5, align 8\l  %839 = getelementptr inbounds i64, ptr %838, i64 9\l  %840 = load i64, ptr %839, align 8\l  %841 = load ptr, ptr %5, align 8\l  %842 = getelementptr inbounds i64, ptr %841, i64 22\l  %843 = load i64, ptr %842, align 8\l  %844 = sub nsw i64 %840, %843\l  %845 = call i32 @MAD_F_MLX(i64 noundef %836, i64 noundef %837, i64 noundef\l... %844, i64 noundef 159906814)\l  %846 = load i64, ptr %249, align 8\l  %847 = shl i64 %846, 4\l  %848 = load i64, ptr %250, align 8\l  %849 = lshr i64 %848, 28\l  %850 = or i64 %847, %849\l  store i64 %850, ptr %251, align 8\l  %851 = load i64, ptr %251, align 8\l  store i64 %851, ptr %36, align 8\l  %852 = load i64, ptr %35, align 8\l  %853 = load i64, ptr %36, align 8\l  %854 = add nsw i64 %852, %853\l  store i64 %854, ptr %55, align 8\l  %855 = load i64, ptr %252, align 8\l  %856 = load i64, ptr %253, align 8\l  %857 = load i64, ptr %35, align 8\l  %858 = load i64, ptr %36, align 8\l  %859 = sub nsw i64 %857, %858\l  %860 = call i32 @MAD_F_MLX(i64 noundef %855, i64 noundef %856, i64 noundef\l... %859, i64 noundef 77922700)\l  %861 = load i64, ptr %252, align 8\l  %862 = shl i64 %861, 4\l  %863 = load i64, ptr %253, align 8\l  %864 = lshr i64 %863, 28\l  %865 = or i64 %862, %864\l  store i64 %865, ptr %254, align 8\l  %866 = load i64, ptr %254, align 8\l  store i64 %866, ptr %73, align 8\l  %867 = load i64, ptr %19, align 8\l  %868 = load i64, ptr %20, align 8\l  %869 = add nsw i64 %867, %868\l  store i64 %869, ptr %47, align 8\l  %870 = load i64, ptr %255, align 8\l  %871 = load i64, ptr %256, align 8\l  %872 = load i64, ptr %19, align 8\l  %873 = load i64, ptr %20, align 8\l  %874 = sub nsw i64 %872, %873\l  %875 = call i32 @MAD_F_MLX(i64 noundef %870, i64 noundef %871, i64 noundef\l... %874, i64 noundef 77922700)\l  %876 = load i64, ptr %255, align 8\l  %877 = shl i64 %876, 4\l  %878 = load i64, ptr %256, align 8\l  %879 = lshr i64 %878, 28\l  %880 = or i64 %877, %879\l  store i64 %880, ptr %257, align 8\l  %881 = load i64, ptr %257, align 8\l  store i64 %881, ptr %64, align 8\l  %882 = load ptr, ptr %5, align 8\l  %883 = getelementptr inbounds i64, ptr %882, i64 2\l  %884 = load i64, ptr %883, align 8\l  %885 = load ptr, ptr %5, align 8\l  %886 = getelementptr inbounds i64, ptr %885, i64 29\l  %887 = load i64, ptr %886, align 8\l  %888 = add nsw i64 %884, %887\l  store i64 %888, ptr %21, align 8\l  %889 = load i64, ptr %258, align 8\l  %890 = load i64, ptr %259, align 8\l  %891 = load ptr, ptr %5, align 8\l  %892 = getelementptr inbounds i64, ptr %891, i64 2\l  %893 = load i64, ptr %892, align 8\l  %894 = load ptr, ptr %5, align 8\l  %895 = getelementptr inbounds i64, ptr %894, i64 29\l  %896 = load i64, ptr %895, align 8\l  %897 = sub nsw i64 %893, %896\l  %898 = call i32 @MAD_F_MLX(i64 noundef %889, i64 noundef %890, i64 noundef\l... %897, i64 noundef 260390782)\l  %899 = load i64, ptr %258, align 8\l  %900 = shl i64 %899, 4\l  %901 = load i64, ptr %259, align 8\l  %902 = lshr i64 %901, 28\l  %903 = or i64 %900, %902\l  store i64 %903, ptr %260, align 8\l  %904 = load i64, ptr %260, align 8\l  store i64 %904, ptr %37, align 8\l  %905 = load ptr, ptr %5, align 8\l  %906 = getelementptr inbounds i64, ptr %905, i64 13\l  %907 = load i64, ptr %906, align 8\l  %908 = load ptr, ptr %5, align 8\l  %909 = getelementptr inbounds i64, ptr %908, i64 18\l  %910 = load i64, ptr %909, align 8\l  %911 = add nsw i64 %907, %910\l  store i64 %911, ptr %22, align 8\l  %912 = load i64, ptr %261, align 8\l  %913 = load i64, ptr %262, align 8\l  %914 = load ptr, ptr %5, align 8\l  %915 = getelementptr inbounds i64, ptr %914, i64 13\l  %916 = load i64, ptr %915, align 8\l  %917 = load ptr, ptr %5, align 8\l  %918 = getelementptr inbounds i64, ptr %917, i64 18\l  %919 = load i64, ptr %918, align 8\l  %920 = sub nsw i64 %916, %919\l  %921 = call i32 @MAD_F_MLX(i64 noundef %912, i64 noundef %913, i64 noundef\l... %920, i64 noundef 65224495)\l  %922 = load i64, ptr %261, align 8\l  %923 = shl i64 %922, 4\l  %924 = load i64, ptr %262, align 8\l  %925 = lshr i64 %924, 28\l  %926 = or i64 %923, %925\l  store i64 %926, ptr %263, align 8\l  %927 = load i64, ptr %263, align 8\l  store i64 %927, ptr %38, align 8\l  %928 = load i64, ptr %37, align 8\l  %929 = load i64, ptr %38, align 8\l  %930 = add nsw i64 %928, %929\l  store i64 %930, ptr %56, align 8\l  %931 = load i64, ptr %264, align 8\l  %932 = load i64, ptr %265, align 8\l  %933 = load i64, ptr %37, align 8\l  %934 = load i64, ptr %38, align 8\l  %935 = sub nsw i64 %933, %934\l  %936 = call i32 @MAD_F_MLX(i64 noundef %931, i64 noundef %932, i64 noundef\l... %935, i64 noundef 236738937)\l  %937 = load i64, ptr %264, align 8\l  %938 = shl i64 %937, 4\l  %939 = load i64, ptr %265, align 8\l  %940 = lshr i64 %939, 28\l  %941 = or i64 %938, %940\l  store i64 %941, ptr %266, align 8\l  %942 = load i64, ptr %266, align 8\l  store i64 %942, ptr %74, align 8\l  %943 = load i64, ptr %21, align 8\l  %944 = load i64, ptr %22, align 8\l  %945 = add nsw i64 %943, %944\l  store i64 %945, ptr %48, align 8\l  %946 = load i64, ptr %267, align 8\l  %947 = load i64, ptr %268, align 8\l  %948 = load i64, ptr %21, align 8\l  %949 = load i64, ptr %22, align 8\l  %950 = sub nsw i64 %948, %949\l  %951 = call i32 @MAD_F_MLX(i64 noundef %946, i64 noundef %947, i64 noundef\l... %950, i64 noundef 236738937)\l  %952 = load i64, ptr %267, align 8\l  %953 = shl i64 %952, 4\l  %954 = load i64, ptr %268, align 8\l  %955 = lshr i64 %954, 28\l  %956 = or i64 %953, %955\l  store i64 %956, ptr %269, align 8\l  %957 = load i64, ptr %269, align 8\l  store i64 %957, ptr %65, align 8\l  %958 = load ptr, ptr %5, align 8\l  %959 = getelementptr inbounds i64, ptr %958, i64 5\l  %960 = load i64, ptr %959, align 8\l  %961 = load ptr, ptr %5, align 8\l  %962 = getelementptr inbounds i64, ptr %961, i64 26\l  %963 = load i64, ptr %962, align 8\l  %964 = add nsw i64 %960, %963\l  store i64 %964, ptr %23, align 8\l  %965 = load i64, ptr %270, align 8\l  %966 = load i64, ptr %271, align 8\l  %967 = load ptr, ptr %5, align 8\l  %968 = getelementptr inbounds i64, ptr %967, i64 5\l  %969 = load i64, ptr %968, align 8\l  %970 = load ptr, ptr %5, align 8\l  %971 = getelementptr inbounds i64, ptr %970, i64 26\l  %972 = load i64, ptr %971, align 8\l  %973 = sub nsw i64 %969, %972\l  %974 = call i32 @MAD_F_MLX(i64 noundef %965, i64 noundef %966, i64 noundef\l... %973, i64 noundef 230244771)\l  %975 = load i64, ptr %270, align 8\l  %976 = shl i64 %975, 4\l  %977 = load i64, ptr %271, align 8\l  %978 = lshr i64 %977, 28\l  %979 = or i64 %976, %978\l  store i64 %979, ptr %272, align 8\l  %980 = load i64, ptr %272, align 8\l  store i64 %980, ptr %39, align 8\l  %981 = load ptr, ptr %5, align 8\l  %982 = getelementptr inbounds i64, ptr %981, i64 10\l  %983 = load i64, ptr %982, align 8\l  %984 = load ptr, ptr %5, align 8\l  %985 = getelementptr inbounds i64, ptr %984, i64 21\l  %986 = load i64, ptr %985, align 8\l  %987 = add nsw i64 %983, %986\l  store i64 %987, ptr %24, align 8\l  %988 = load i64, ptr %273, align 8\l  %989 = load i64, ptr %274, align 8\l  %990 = load ptr, ptr %5, align 8\l  %991 = getelementptr inbounds i64, ptr %990, i64 10\l  %992 = load i64, ptr %991, align 8\l  %993 = load ptr, ptr %5, align 8\l  %994 = getelementptr inbounds i64, ptr %993, i64 21\l  %995 = load i64, ptr %994, align 8\l  %996 = sub nsw i64 %992, %995\l  %997 = call i32 @MAD_F_MLX(i64 noundef %988, i64 noundef %989, i64 noundef\l... %996, i64 noundef 138003405)\l  %998 = load i64, ptr %273, align 8\l  %999 = shl i64 %998, 4\l  %1000 = load i64, ptr %274, align 8\l  %1001 = lshr i64 %1000, 28\l  %1002 = or i64 %999, %1001\l  store i64 %1002, ptr %275, align 8\l  %1003 = load i64, ptr %275, align 8\l  store i64 %1003, ptr %40, align 8\l  %1004 = load i64, ptr %39, align 8\l  %1005 = load i64, ptr %40, align 8\l  %1006 = add nsw i64 %1004, %1005\l  store i64 %1006, ptr %57, align 8\l  %1007 = load i64, ptr %276, align 8\l  %1008 = load i64, ptr %277, align 8\l  %1009 = load i64, ptr %39, align 8\l  %1010 = load i64, ptr %40, align 8\l  %1011 = sub nsw i64 %1009, %1010\l  %1012 = call i32 @MAD_F_MLX(i64 noundef %1007, i64 noundef %1008, i64\l... noundef %1011, i64 noundef 126539598)\l  %1013 = load i64, ptr %276, align 8\l  %1014 = shl i64 %1013, 4\l  %1015 = load i64, ptr %277, align 8\l  %1016 = lshr i64 %1015, 28\l  %1017 = or i64 %1014, %1016\l  store i64 %1017, ptr %278, align 8\l  %1018 = load i64, ptr %278, align 8\l  store i64 %1018, ptr %75, align 8\l  %1019 = load i64, ptr %23, align 8\l  %1020 = load i64, ptr %24, align 8\l  %1021 = add nsw i64 %1019, %1020\l  store i64 %1021, ptr %49, align 8\l  %1022 = load i64, ptr %279, align 8\l  %1023 = load i64, ptr %280, align 8\l  %1024 = load i64, ptr %23, align 8\l  %1025 = load i64, ptr %24, align 8\l  %1026 = sub nsw i64 %1024, %1025\l  %1027 = call i32 @MAD_F_MLX(i64 noundef %1022, i64 noundef %1023, i64\l... noundef %1026, i64 noundef 126539598)\l  %1028 = load i64, ptr %279, align 8\l  %1029 = shl i64 %1028, 4\l  %1030 = load i64, ptr %280, align 8\l  %1031 = lshr i64 %1030, 28\l  %1032 = or i64 %1029, %1031\l  store i64 %1032, ptr %281, align 8\l  %1033 = load i64, ptr %281, align 8\l  store i64 %1033, ptr %66, align 8\l  %1034 = load i64, ptr %42, align 8\l  %1035 = load i64, ptr %43, align 8\l  %1036 = add nsw i64 %1034, %1035\l  store i64 %1036, ptr %78, align 8\l  %1037 = load i64, ptr %282, align 8\l  %1038 = load i64, ptr %283, align 8\l  %1039 = load i64, ptr %42, align 8\l  %1040 = load i64, ptr %43, align 8\l  %1041 = sub nsw i64 %1039, %1040\l  %1042 = call i32 @MAD_F_MLX(i64 noundef %1037, i64 noundef %1038, i64\l... noundef %1041, i64 noundef 263277544)\l  %1043 = load i64, ptr %282, align 8\l  %1044 = shl i64 %1043, 4\l  %1045 = load i64, ptr %283, align 8\l  %1046 = lshr i64 %1045, 28\l  %1047 = or i64 %1044, %1046\l  store i64 %1047, ptr %284, align 8\l  %1048 = load i64, ptr %284, align 8\l  store i64 %1048, ptr %98, align 8\l  %1049 = load i64, ptr %44, align 8\l  %1050 = load i64, ptr %45, align 8\l  %1051 = add nsw i64 %1049, %1050\l  store i64 %1051, ptr %79, align 8\l  %1052 = load i64, ptr %285, align 8\l  %1053 = load i64, ptr %286, align 8\l  %1054 = load i64, ptr %44, align 8\l  %1055 = load i64, ptr %45, align 8\l  %1056 = sub nsw i64 %1054, %1055\l  %1057 = call i32 @MAD_F_MLX(i64 noundef %1052, i64 noundef %1053, i64\l... noundef %1056, i64 noundef 52369160)\l  %1058 = load i64, ptr %285, align 8\l  %1059 = shl i64 %1058, 4\l  %1060 = load i64, ptr %286, align 8\l  %1061 = lshr i64 %1060, 28\l  %1062 = or i64 %1059, %1061\l  store i64 %1062, ptr %287, align 8\l  %1063 = load i64, ptr %287, align 8\l  store i64 %1063, ptr %99, align 8\l  %1064 = load i64, ptr %46, align 8\l  %1065 = load i64, ptr %47, align 8\l  %1066 = add nsw i64 %1064, %1065\l  store i64 %1066, ptr %80, align 8\l  %1067 = load i64, ptr %288, align 8\l  %1068 = load i64, ptr %289, align 8\l  %1069 = load i64, ptr %46, align 8\l  %1070 = load i64, ptr %47, align 8\l  %1071 = sub nsw i64 %1069, %1070\l  %1072 = call i32 @MAD_F_MLX(i64 noundef %1067, i64 noundef %1068, i64\l... noundef %1071, i64 noundef 223195925)\l  %1073 = load i64, ptr %288, align 8\l  %1074 = shl i64 %1073, 4\l  %1075 = load i64, ptr %289, align 8\l  %1076 = lshr i64 %1075, 28\l  %1077 = or i64 %1074, %1076\l  store i64 %1077, ptr %290, align 8\l  %1078 = load i64, ptr %290, align 8\l  store i64 %1078, ptr %100, align 8\l  %1079 = load i64, ptr %48, align 8\l  %1080 = load i64, ptr %49, align 8\l  %1081 = add nsw i64 %1079, %1080\l  store i64 %1081, ptr %81, align 8\l  %1082 = load i64, ptr %291, align 8\l  %1083 = load i64, ptr %292, align 8\l  %1084 = load i64, ptr %48, align 8\l  %1085 = load i64, ptr %49, align 8\l  %1086 = sub nsw i64 %1084, %1085\l  %1087 = call i32 @MAD_F_MLX(i64 noundef %1082, i64 noundef %1083, i64\l... noundef %1086, i64 noundef 149134749)\l  %1088 = load i64, ptr %291, align 8\l  %1089 = shl i64 %1088, 4\l  %1090 = load i64, ptr %292, align 8\l  %1091 = lshr i64 %1090, 28\l  %1092 = or i64 %1089, %1091\l  store i64 %1092, ptr %293, align 8\l  %1093 = load i64, ptr %293, align 8\l  store i64 %1093, ptr %101, align 8\l  %1094 = load i64, ptr %50, align 8\l  %1095 = load i64, ptr %51, align 8\l  %1096 = add nsw i64 %1094, %1095\l  store i64 %1096, ptr %82, align 8\l  %1097 = load i64, ptr %294, align 8\l  %1098 = load i64, ptr %295, align 8\l  %1099 = load i64, ptr %50, align 8\l  %1100 = load i64, ptr %51, align 8\l  %1101 = sub nsw i64 %1099, %1100\l  %1102 = call i32 @MAD_F_MLX(i64 noundef %1097, i64 noundef %1098, i64\l... noundef %1101, i64 noundef 263277544)\l  %1103 = load i64, ptr %294, align 8\l  %1104 = shl i64 %1103, 4\l  %1105 = load i64, ptr %295, align 8\l  %1106 = lshr i64 %1105, 28\l  %1107 = or i64 %1104, %1106\l  store i64 %1107, ptr %296, align 8\l  %1108 = load i64, ptr %296, align 8\l  store i64 %1108, ptr %103, align 8\l  %1109 = load i64, ptr %52, align 8\l  %1110 = load i64, ptr %53, align 8\l  %1111 = add nsw i64 %1109, %1110\l  store i64 %1111, ptr %83, align 8\l  %1112 = load i64, ptr %297, align 8\l  %1113 = load i64, ptr %298, align 8\l  %1114 = load i64, ptr %52, align 8\l  %1115 = load i64, ptr %53, align 8\l  %1116 = sub nsw i64 %1114, %1115\l  %1117 = call i32 @MAD_F_MLX(i64 noundef %1112, i64 noundef %1113, i64\l... noundef %1116, i64 noundef 52369160)\l  %1118 = load i64, ptr %297, align 8\l  %1119 = shl i64 %1118, 4\l  %1120 = load i64, ptr %298, align 8\l  %1121 = lshr i64 %1120, 28\l  %1122 = or i64 %1119, %1121\l  store i64 %1122, ptr %299, align 8\l  %1123 = load i64, ptr %299, align 8\l  store i64 %1123, ptr %104, align 8\l  %1124 = load i64, ptr %54, align 8\l  %1125 = load i64, ptr %55, align 8\l  %1126 = add nsw i64 %1124, %1125\l  store i64 %1126, ptr %84, align 8\l  %1127 = load i64, ptr %300, align 8\l  %1128 = load i64, ptr %301, align 8\l  %1129 = load i64, ptr %54, align 8\l  %1130 = load i64, ptr %55, align 8\l  %1131 = sub nsw i64 %1129, %1130\l  %1132 = call i32 @MAD_F_MLX(i64 noundef %1127, i64 noundef %1128, i64\l... noundef %1131, i64 noundef 223195925)\l  %1133 = load i64, ptr %300, align 8\l  %1134 = shl i64 %1133, 4\l  %1135 = load i64, ptr %301, align 8\l  %1136 = lshr i64 %1135, 28\l  %1137 = or i64 %1134, %1136\l  store i64 %1137, ptr %302, align 8\l  %1138 = load i64, ptr %302, align 8\l  store i64 %1138, ptr %105, align 8\l  %1139 = load i64, ptr %56, align 8\l  %1140 = load i64, ptr %57, align 8\l  %1141 = add nsw i64 %1139, %1140\l  store i64 %1141, ptr %85, align 8\l  %1142 = load i64, ptr %303, align 8\l  %1143 = load i64, ptr %304, align 8\l  %1144 = load i64, ptr %56, align 8\l  %1145 = load i64, ptr %57, align 8\l  %1146 = sub nsw i64 %1144, %1145\l  %1147 = call i32 @MAD_F_MLX(i64 noundef %1142, i64 noundef %1143, i64\l... noundef %1146, i64 noundef 149134749)\l  %1148 = load i64, ptr %303, align 8\l  %1149 = shl i64 %1148, 4\l  %1150 = load i64, ptr %304, align 8\l  %1151 = lshr i64 %1150, 28\l  %1152 = or i64 %1149, %1151\l  store i64 %1152, ptr %305, align 8\l  %1153 = load i64, ptr %305, align 8\l  store i64 %1153, ptr %106, align 8\l  %1154 = load i64, ptr %59, align 8\l  %1155 = load i64, ptr %60, align 8\l  %1156 = add nsw i64 %1154, %1155\l  store i64 %1156, ptr %87, align 8\l  %1157 = load i64, ptr %306, align 8\l  %1158 = load i64, ptr %307, align 8\l  %1159 = load i64, ptr %59, align 8\l  %1160 = load i64, ptr %60, align 8\l  %1161 = sub nsw i64 %1159, %1160\l  %1162 = call i32 @MAD_F_MLX(i64 noundef %1157, i64 noundef %1158, i64\l... noundef %1161, i64 noundef 263277544)\l  %1163 = load i64, ptr %306, align 8\l  %1164 = shl i64 %1163, 4\l  %1165 = load i64, ptr %307, align 8\l  %1166 = lshr i64 %1165, 28\l  %1167 = or i64 %1164, %1166\l  store i64 %1167, ptr %308, align 8\l  %1168 = load i64, ptr %308, align 8\l  store i64 %1168, ptr %109, align 8\l  %1169 = load i64, ptr %61, align 8\l  %1170 = load i64, ptr %62, align 8\l  %1171 = add nsw i64 %1169, %1170\l  store i64 %1171, ptr %88, align 8\l  %1172 = load i64, ptr %309, align 8\l  %1173 = load i64, ptr %310, align 8\l  %1174 = load i64, ptr %61, align 8\l  %1175 = load i64, ptr %62, align 8\l  %1176 = sub nsw i64 %1174, %1175\l  %1177 = call i32 @MAD_F_MLX(i64 noundef %1172, i64 noundef %1173, i64\l... noundef %1176, i64 noundef 52369160)\l  %1178 = load i64, ptr %309, align 8\l  %1179 = shl i64 %1178, 4\l  %1180 = load i64, ptr %310, align 8\l  %1181 = lshr i64 %1180, 28\l  %1182 = or i64 %1179, %1181\l  store i64 %1182, ptr %311, align 8\l  %1183 = load i64, ptr %311, align 8\l  store i64 %1183, ptr %110, align 8\l  %1184 = load i64, ptr %63, align 8\l  %1185 = load i64, ptr %64, align 8\l  %1186 = add nsw i64 %1184, %1185\l  store i64 %1186, ptr %89, align 8\l  %1187 = load i64, ptr %312, align 8\l  %1188 = load i64, ptr %313, align 8\l  %1189 = load i64, ptr %63, align 8\l  %1190 = load i64, ptr %64, align 8\l  %1191 = sub nsw i64 %1189, %1190\l  %1192 = call i32 @MAD_F_MLX(i64 noundef %1187, i64 noundef %1188, i64\l... noundef %1191, i64 noundef 223195925)\l  %1193 = load i64, ptr %312, align 8\l  %1194 = shl i64 %1193, 4\l  %1195 = load i64, ptr %313, align 8\l  %1196 = lshr i64 %1195, 28\l  %1197 = or i64 %1194, %1196\l  store i64 %1197, ptr %314, align 8\l  %1198 = load i64, ptr %314, align 8\l  store i64 %1198, ptr %111, align 8\l  %1199 = load i64, ptr %65, align 8\l  %1200 = load i64, ptr %66, align 8\l  %1201 = add nsw i64 %1199, %1200\l  store i64 %1201, ptr %90, align 8\l  %1202 = load i64, ptr %315, align 8\l  %1203 = load i64, ptr %316, align 8\l  %1204 = load i64, ptr %65, align 8\l  %1205 = load i64, ptr %66, align 8\l  %1206 = sub nsw i64 %1204, %1205\l  %1207 = call i32 @MAD_F_MLX(i64 noundef %1202, i64 noundef %1203, i64\l... noundef %1206, i64 noundef 149134749)\l  %1208 = load i64, ptr %315, align 8\l  %1209 = shl i64 %1208, 4\l  %1210 = load i64, ptr %316, align 8\l  %1211 = lshr i64 %1210, 28\l  %1212 = or i64 %1209, %1211\l  store i64 %1212, ptr %317, align 8\l  %1213 = load i64, ptr %317, align 8\l  store i64 %1213, ptr %112, align 8\l  %1214 = load i64, ptr %68, align 8\l  %1215 = load i64, ptr %69, align 8\l  %1216 = add nsw i64 %1214, %1215\l  store i64 %1216, ptr %92, align 8\l  %1217 = load i64, ptr %318, align 8\l  %1218 = load i64, ptr %319, align 8\l  %1219 = load i64, ptr %68, align 8\l  %1220 = load i64, ptr %69, align 8\l  %1221 = sub nsw i64 %1219, %1220\l  %1222 = call i32 @MAD_F_MLX(i64 noundef %1217, i64 noundef %1218, i64\l... noundef %1221, i64 noundef 263277544)\l  %1223 = load i64, ptr %318, align 8\l  %1224 = shl i64 %1223, 4\l  %1225 = load i64, ptr %319, align 8\l  %1226 = lshr i64 %1225, 28\l  %1227 = or i64 %1224, %1226\l  store i64 %1227, ptr %320, align 8\l  %1228 = load i64, ptr %320, align 8\l  store i64 %1228, ptr %115, align 8\l  %1229 = load i64, ptr %70, align 8\l  %1230 = load i64, ptr %71, align 8\l  %1231 = add nsw i64 %1229, %1230\l  store i64 %1231, ptr %93, align 8\l  %1232 = load i64, ptr %321, align 8\l  %1233 = load i64, ptr %322, align 8\l  %1234 = load i64, ptr %70, align 8\l  %1235 = load i64, ptr %71, align 8\l  %1236 = sub nsw i64 %1234, %1235\l  %1237 = call i32 @MAD_F_MLX(i64 noundef %1232, i64 noundef %1233, i64\l... noundef %1236, i64 noundef 52369160)\l  %1238 = load i64, ptr %321, align 8\l  %1239 = shl i64 %1238, 4\l  %1240 = load i64, ptr %322, align 8\l  %1241 = lshr i64 %1240, 28\l  %1242 = or i64 %1239, %1241\l  store i64 %1242, ptr %323, align 8\l  %1243 = load i64, ptr %323, align 8\l  store i64 %1243, ptr %116, align 8\l  %1244 = load i64, ptr %72, align 8\l  %1245 = load i64, ptr %73, align 8\l  %1246 = add nsw i64 %1244, %1245\l  store i64 %1246, ptr %94, align 8\l  %1247 = load i64, ptr %324, align 8\l  %1248 = load i64, ptr %325, align 8\l  %1249 = load i64, ptr %72, align 8\l  %1250 = load i64, ptr %73, align 8\l  %1251 = sub nsw i64 %1249, %1250\l  %1252 = call i32 @MAD_F_MLX(i64 noundef %1247, i64 noundef %1248, i64\l... noundef %1251, i64 noundef 223195925)\l  %1253 = load i64, ptr %324, align 8\l  %1254 = shl i64 %1253, 4\l  %1255 = load i64, ptr %325, align 8\l  %1256 = lshr i64 %1255, 28\l  %1257 = or i64 %1254, %1256\l  store i64 %1257, ptr %326, align 8\l  %1258 = load i64, ptr %326, align 8\l  store i64 %1258, ptr %117, align 8\l  %1259 = load i64, ptr %74, align 8\l  %1260 = load i64, ptr %75, align 8\l  %1261 = add nsw i64 %1259, %1260\l  store i64 %1261, ptr %95, align 8\l  %1262 = load i64, ptr %327, align 8\l  %1263 = load i64, ptr %328, align 8\l  %1264 = load i64, ptr %74, align 8\l  %1265 = load i64, ptr %75, align 8\l  %1266 = sub nsw i64 %1264, %1265\l  %1267 = call i32 @MAD_F_MLX(i64 noundef %1262, i64 noundef %1263, i64\l... noundef %1266, i64 noundef 149134749)\l  %1268 = load i64, ptr %327, align 8\l  %1269 = shl i64 %1268, 4\l  %1270 = load i64, ptr %328, align 8\l  %1271 = lshr i64 %1270, 28\l  %1272 = or i64 %1269, %1271\l  store i64 %1272, ptr %329, align 8\l  %1273 = load i64, ptr %329, align 8\l  store i64 %1273, ptr %118, align 8\l  %1274 = load i64, ptr %78, align 8\l  %1275 = load i64, ptr %79, align 8\l  %1276 = add nsw i64 %1274, %1275\l  store i64 %1276, ptr %122, align 8\l  %1277 = load i64, ptr %80, align 8\l  %1278 = load i64, ptr %81, align 8\l  %1279 = add nsw i64 %1277, %1278\l  store i64 %1279, ptr %123, align 8\l  %1280 = load i64, ptr %122, align 8\l  %1281 = load i64, ptr %123, align 8\l  %1282 = add nsw i64 %1280, %1281\l  %1283 = load ptr, ptr %8, align 8\l  %1284 = getelementptr inbounds [8 x i64], ptr %1283, i64 15\l  %1285 = load i32, ptr %6, align 4\l  %1286 = zext i32 %1285 to i64\l  %1287 = getelementptr inbounds [8 x i64], ptr %1284, i64 0, i64 %1286\l  store i64 %1282, ptr %1287, align 8\l  %1288 = load i64, ptr %330, align 8\l  %1289 = load i64, ptr %331, align 8\l  %1290 = load i64, ptr %122, align 8\l  %1291 = load i64, ptr %123, align 8\l  %1292 = sub nsw i64 %1290, %1291\l  %1293 = call i32 @MAD_F_MLX(i64 noundef %1288, i64 noundef %1289, i64\l... noundef %1292, i64 noundef 189812531)\l  %1294 = load i64, ptr %330, align 8\l  %1295 = shl i64 %1294, 4\l  %1296 = load i64, ptr %331, align 8\l  %1297 = lshr i64 %1296, 28\l  %1298 = or i64 %1295, %1297\l  store i64 %1298, ptr %332, align 8\l  %1299 = load i64, ptr %332, align 8\l  %1300 = load ptr, ptr %7, align 8\l  %1301 = getelementptr inbounds [8 x i64], ptr %1300, i64 0\l  %1302 = load i32, ptr %6, align 4\l  %1303 = zext i32 %1302 to i64\l  %1304 = getelementptr inbounds [8 x i64], ptr %1301, i64 0, i64 %1303\l  store i64 %1299, ptr %1304, align 8\l  %1305 = load i64, ptr %82, align 8\l  %1306 = load i64, ptr %83, align 8\l  %1307 = add nsw i64 %1305, %1306\l  store i64 %1307, ptr %124, align 8\l  %1308 = load i64, ptr %84, align 8\l  %1309 = load i64, ptr %85, align 8\l  %1310 = add nsw i64 %1308, %1309\l  store i64 %1310, ptr %125, align 8\l  %1311 = load i64, ptr %124, align 8\l  %1312 = load i64, ptr %125, align 8\l  %1313 = add nsw i64 %1311, %1312\l  store i64 %1313, ptr %41, align 8\l  %1314 = load i64, ptr %41, align 8\l  %1315 = load ptr, ptr %8, align 8\l  %1316 = getelementptr inbounds [8 x i64], ptr %1315, i64 14\l  %1317 = load i32, ptr %6, align 4\l  %1318 = zext i32 %1317 to i64\l  %1319 = getelementptr inbounds [8 x i64], ptr %1316, i64 0, i64 %1318\l  store i64 %1314, ptr %1319, align 8\l  %1320 = load i64, ptr %87, align 8\l  %1321 = load i64, ptr %88, align 8\l  %1322 = add nsw i64 %1320, %1321\l  store i64 %1322, ptr %127, align 8\l  %1323 = load i64, ptr %89, align 8\l  %1324 = load i64, ptr %90, align 8\l  %1325 = add nsw i64 %1323, %1324\l  store i64 %1325, ptr %128, align 8\l  %1326 = load i64, ptr %127, align 8\l  %1327 = load i64, ptr %128, align 8\l  %1328 = add nsw i64 %1326, %1327\l  store i64 %1328, ptr %67, align 8\l  %1329 = load i64, ptr %67, align 8\l  %1330 = load ptr, ptr %8, align 8\l  %1331 = getelementptr inbounds [8 x i64], ptr %1330, i64 13\l  %1332 = load i32, ptr %6, align 4\l  %1333 = zext i32 %1332 to i64\l  %1334 = getelementptr inbounds [8 x i64], ptr %1331, i64 0, i64 %1333\l  store i64 %1329, ptr %1334, align 8\l  %1335 = load i64, ptr %92, align 8\l  %1336 = load i64, ptr %93, align 8\l  %1337 = add nsw i64 %1335, %1336\l  store i64 %1337, ptr %130, align 8\l  %1338 = load i64, ptr %94, align 8\l  %1339 = load i64, ptr %95, align 8\l  %1340 = add nsw i64 %1338, %1339\l  store i64 %1340, ptr %131, align 8\l  %1341 = load i64, ptr %130, align 8\l  %1342 = load i64, ptr %131, align 8\l  %1343 = add nsw i64 %1341, %1342\l  store i64 %1343, ptr %76, align 8\l  %1344 = load i64, ptr %76, align 8\l  %1345 = mul nsw i64 %1344, 2\l  %1346 = load i64, ptr %41, align 8\l  %1347 = sub nsw i64 %1345, %1346\l  store i64 %1347, ptr %58, align 8\l  %1348 = load i64, ptr %58, align 8\l  %1349 = load ptr, ptr %8, align 8\l  %1350 = getelementptr inbounds [8 x i64], ptr %1349, i64 12\l  %1351 = load i32, ptr %6, align 4\l  %1352 = zext i32 %1351 to i64\l  %1353 = getelementptr inbounds [8 x i64], ptr %1350, i64 0, i64 %1352\l  store i64 %1348, ptr %1353, align 8\l  %1354 = load i64, ptr %98, align 8\l  %1355 = load i64, ptr %99, align 8\l  %1356 = add nsw i64 %1354, %1355\l  store i64 %1356, ptr %134, align 8\l  %1357 = load i64, ptr %100, align 8\l  %1358 = load i64, ptr %101, align 8\l  %1359 = add nsw i64 %1357, %1358\l  store i64 %1359, ptr %135, align 8\l  %1360 = load i64, ptr %134, align 8\l  %1361 = load i64, ptr %135, align 8\l  %1362 = add nsw i64 %1360, %1361\l  store i64 %1362, ptr %102, align 8\l  %1363 = load i64, ptr %102, align 8\l  %1364 = load ptr, ptr %8, align 8\l  %1365 = getelementptr inbounds [8 x i64], ptr %1364, i64 11\l  %1366 = load i32, ptr %6, align 4\l  %1367 = zext i32 %1366 to i64\l  %1368 = getelementptr inbounds [8 x i64], ptr %1365, i64 0, i64 %1367\l  store i64 %1363, ptr %1368, align 8\l  %1369 = load i64, ptr %103, align 8\l  %1370 = load i64, ptr %104, align 8\l  %1371 = add nsw i64 %1369, %1370\l  store i64 %1371, ptr %137, align 8\l  %1372 = load i64, ptr %105, align 8\l  %1373 = load i64, ptr %106, align 8\l  %1374 = add nsw i64 %1372, %1373\l  store i64 %1374, ptr %138, align 8\l  %1375 = load i64, ptr %137, align 8\l  %1376 = load i64, ptr %138, align 8\l  %1377 = add nsw i64 %1375, %1376\l  store i64 %1377, ptr %107, align 8\l  %1378 = load i64, ptr %107, align 8\l  %1379 = mul nsw i64 %1378, 2\l  %1380 = load i64, ptr %58, align 8\l  %1381 = sub nsw i64 %1379, %1380\l  store i64 %1381, ptr %77, align 8\l  %1382 = load i64, ptr %77, align 8\l  %1383 = load ptr, ptr %8, align 8\l  %1384 = getelementptr inbounds [8 x i64], ptr %1383, i64 10\l  %1385 = load i32, ptr %6, align 4\l  %1386 = zext i32 %1385 to i64\l  %1387 = getelementptr inbounds [8 x i64], ptr %1384, i64 0, i64 %1386\l  store i64 %1382, ptr %1387, align 8\l  %1388 = load i64, ptr %109, align 8\l  %1389 = load i64, ptr %110, align 8\l  %1390 = add nsw i64 %1388, %1389\l  store i64 %1390, ptr %141, align 8\l  %1391 = load i64, ptr %111, align 8\l  %1392 = load i64, ptr %112, align 8\l  %1393 = add nsw i64 %1391, %1392\l  store i64 %1393, ptr %142, align 8\l  %1394 = load i64, ptr %141, align 8\l  %1395 = load i64, ptr %142, align 8\l  %1396 = add nsw i64 %1394, %1395\l  store i64 %1396, ptr %113, align 8\l  %1397 = load i64, ptr %113, align 8\l  %1398 = mul nsw i64 %1397, 2\l  %1399 = load i64, ptr %67, align 8\l  %1400 = sub nsw i64 %1398, %1399\l  store i64 %1400, ptr %91, align 8\l  %1401 = load i64, ptr %91, align 8\l  %1402 = load ptr, ptr %8, align 8\l  %1403 = getelementptr inbounds [8 x i64], ptr %1402, i64 9\l  %1404 = load i32, ptr %6, align 4\l  %1405 = zext i32 %1404 to i64\l  %1406 = getelementptr inbounds [8 x i64], ptr %1403, i64 0, i64 %1405\l  store i64 %1401, ptr %1406, align 8\l  %1407 = load i64, ptr %115, align 8\l  %1408 = load i64, ptr %116, align 8\l  %1409 = add nsw i64 %1407, %1408\l  store i64 %1409, ptr %145, align 8\l  %1410 = load i64, ptr %117, align 8\l  %1411 = load i64, ptr %118, align 8\l  %1412 = add nsw i64 %1410, %1411\l  store i64 %1412, ptr %146, align 8\l  %1413 = load i64, ptr %145, align 8\l  %1414 = load i64, ptr %146, align 8\l  %1415 = add nsw i64 %1413, %1414\l  store i64 %1415, ptr %119, align 8\l  %1416 = load i64, ptr %119, align 8\l  %1417 = mul nsw i64 %1416, 2\l  %1418 = load i64, ptr %76, align 8\l  %1419 = sub nsw i64 %1417, %1418\l  store i64 %1419, ptr %96, align 8\l  %1420 = load i64, ptr %96, align 8\l  %1421 = mul nsw i64 %1420, 2\l  %1422 = load i64, ptr %77, align 8\l  %1423 = sub nsw i64 %1421, %1422\l  store i64 %1423, ptr %86, align 8\l  %1424 = load i64, ptr %86, align 8\l  %1425 = load ptr, ptr %8, align 8\l  %1426 = getelementptr inbounds [8 x i64], ptr %1425, i64 8\l  %1427 = load i32, ptr %6, align 4\l  %1428 = zext i32 %1427 to i64\l  %1429 = getelementptr inbounds [8 x i64], ptr %1426, i64 0, i64 %1428\l  store i64 %1424, ptr %1429, align 8\l  %1430 = load i64, ptr %333, align 8\l  %1431 = load i64, ptr %334, align 8\l  %1432 = load i64, ptr %78, align 8\l  %1433 = load i64, ptr %79, align 8\l  %1434 = sub nsw i64 %1432, %1433\l  %1435 = call i32 @MAD_F_MLX(i64 noundef %1430, i64 noundef %1431, i64\l... noundef %1434, i64 noundef 248002024)\l  %1436 = load i64, ptr %333, align 8\l  %1437 = shl i64 %1436, 4\l  %1438 = load i64, ptr %334, align 8\l  %1439 = lshr i64 %1438, 28\l  %1440 = or i64 %1437, %1439\l  store i64 %1440, ptr %335, align 8\l  %1441 = load i64, ptr %335, align 8\l  store i64 %1441, ptr %150, align 8\l  %1442 = load i64, ptr %336, align 8\l  %1443 = load i64, ptr %337, align 8\l  %1444 = load i64, ptr %80, align 8\l  %1445 = load i64, ptr %81, align 8\l  %1446 = sub nsw i64 %1444, %1445\l  %1447 = call i32 @MAD_F_MLX(i64 noundef %1442, i64 noundef %1443, i64\l... noundef %1446, i64 noundef 102725802)\l  %1448 = load i64, ptr %336, align 8\l  %1449 = shl i64 %1448, 4\l  %1450 = load i64, ptr %337, align 8\l  %1451 = lshr i64 %1450, 28\l  %1452 = or i64 %1449, %1451\l  store i64 %1452, ptr %338, align 8\l  %1453 = load i64, ptr %338, align 8\l  store i64 %1453, ptr %151, align 8\l  %1454 = load i64, ptr %150, align 8\l  %1455 = load i64, ptr %151, align 8\l  %1456 = add nsw i64 %1454, %1455\l  store i64 %1456, ptr %152, align 8\l  %1457 = load i64, ptr %152, align 8\l  %1458 = load ptr, ptr %8, align 8\l  %1459 = getelementptr inbounds [8 x i64], ptr %1458, i64 7\l  %1460 = load i32, ptr %6, align 4\l  %1461 = zext i32 %1460 to i64\l  %1462 = getelementptr inbounds [8 x i64], ptr %1459, i64 0, i64 %1461\l  store i64 %1457, ptr %1462, align 8\l  %1463 = load i64, ptr %339, align 8\l  %1464 = load i64, ptr %340, align 8\l  %1465 = load i64, ptr %150, align 8\l  %1466 = load i64, ptr %151, align 8\l  %1467 = sub nsw i64 %1465, %1466\l  %1468 = call i32 @MAD_F_MLX(i64 noundef %1463, i64 noundef %1464, i64\l... noundef %1467, i64 noundef 189812531)\l  %1469 = load i64, ptr %339, align 8\l  %1470 = shl i64 %1469, 4\l  %1471 = load i64, ptr %340, align 8\l  %1472 = lshr i64 %1471, 28\l  %1473 = or i64 %1470, %1472\l  store i64 %1473, ptr %341, align 8\l  %1474 = load i64, ptr %341, align 8\l  %1475 = mul nsw i64 %1474, 2\l  %1476 = load i64, ptr %152, align 8\l  %1477 = sub nsw i64 %1475, %1476\l  %1478 = load ptr, ptr %7, align 8\l  %1479 = getelementptr inbounds [8 x i64], ptr %1478, i64 8\l  %1480 = load i32, ptr %6, align 4\l  %1481 = zext i32 %1480 to i64\l  %1482 = getelementptr inbounds [8 x i64], ptr %1479, i64 0, i64 %1481\l  store i64 %1477, ptr %1482, align 8\l  %1483 = load i64, ptr %342, align 8\l  %1484 = load i64, ptr %343, align 8\l  %1485 = load i64, ptr %82, align 8\l  %1486 = load i64, ptr %83, align 8\l  %1487 = sub nsw i64 %1485, %1486\l  %1488 = call i32 @MAD_F_MLX(i64 noundef %1483, i64 noundef %1484, i64\l... noundef %1487, i64 noundef 248002024)\l  %1489 = load i64, ptr %342, align 8\l  %1490 = shl i64 %1489, 4\l  %1491 = load i64, ptr %343, align 8\l  %1492 = lshr i64 %1491, 28\l  %1493 = or i64 %1490, %1492\l  store i64 %1493, ptr %344, align 8\l  %1494 = load i64, ptr %344, align 8\l  store i64 %1494, ptr %153, align 8\l  %1495 = load i64, ptr %345, align 8\l  %1496 = load i64, ptr %346, align 8\l  %1497 = load i64, ptr %84, align 8\l  %1498 = load i64, ptr %85, align 8\l  %1499 = sub nsw i64 %1497, %1498\l  %1500 = call i32 @MAD_F_MLX(i64 noundef %1495, i64 noundef %1496, i64\l... noundef %1499, i64 noundef 102725802)\l  %1501 = load i64, ptr %345, align 8\l  %1502 = shl i64 %1501, 4\l  %1503 = load i64, ptr %346, align 8\l  %1504 = lshr i64 %1503, 28\l  %1505 = or i64 %1502, %1504\l  store i64 %1505, ptr %347, align 8\l  %1506 = load i64, ptr %347, align 8\l  store i64 %1506, ptr %154, align 8\l  %1507 = load i64, ptr %153, align 8\l  %1508 = load i64, ptr %154, align 8\l  %1509 = add nsw i64 %1507, %1508\l  store i64 %1509, ptr %155, align 8\l  %1510 = load i64, ptr %155, align 8\l  %1511 = mul nsw i64 %1510, 2\l  %1512 = load i64, ptr %86, align 8\l  %1513 = sub nsw i64 %1511, %1512\l  store i64 %1513, ptr %97, align 8\l  %1514 = load i64, ptr %97, align 8\l  %1515 = load ptr, ptr %8, align 8\l  %1516 = getelementptr inbounds [8 x i64], ptr %1515, i64 6\l  %1517 = load i32, ptr %6, align 4\l  %1518 = zext i32 %1517 to i64\l  %1519 = getelementptr inbounds [8 x i64], ptr %1516, i64 0, i64 %1518\l  store i64 %1514, ptr %1519, align 8\l  %1520 = load i64, ptr %348, align 8\l  %1521 = load i64, ptr %349, align 8\l  %1522 = load i64, ptr %87, align 8\l  %1523 = load i64, ptr %88, align 8\l  %1524 = sub nsw i64 %1522, %1523\l  %1525 = call i32 @MAD_F_MLX(i64 noundef %1520, i64 noundef %1521, i64\l... noundef %1524, i64 noundef 248002024)\l  %1526 = load i64, ptr %348, align 8\l  %1527 = shl i64 %1526, 4\l  %1528 = load i64, ptr %349, align 8\l  %1529 = lshr i64 %1528, 28\l  %1530 = or i64 %1527, %1529\l  store i64 %1530, ptr %350, align 8\l  %1531 = load i64, ptr %350, align 8\l  store i64 %1531, ptr %157, align 8\l  %1532 = load i64, ptr %351, align 8\l  %1533 = load i64, ptr %352, align 8\l  %1534 = load i64, ptr %89, align 8\l  %1535 = load i64, ptr %90, align 8\l  %1536 = sub nsw i64 %1534, %1535\l  %1537 = call i32 @MAD_F_MLX(i64 noundef %1532, i64 noundef %1533, i64\l... noundef %1536, i64 noundef 102725802)\l  %1538 = load i64, ptr %351, align 8\l  %1539 = shl i64 %1538, 4\l  %1540 = load i64, ptr %352, align 8\l  %1541 = lshr i64 %1540, 28\l  %1542 = or i64 %1539, %1541\l  store i64 %1542, ptr %353, align 8\l  %1543 = load i64, ptr %353, align 8\l  store i64 %1543, ptr %158, align 8\l  %1544 = load i64, ptr %157, align 8\l  %1545 = load i64, ptr %158, align 8\l  %1546 = add nsw i64 %1544, %1545\l  store i64 %1546, ptr %159, align 8\l  %1547 = load i64, ptr %159, align 8\l  %1548 = mul nsw i64 %1547, 2\l  %1549 = load i64, ptr %91, align 8\l  %1550 = sub nsw i64 %1548, %1549\l  store i64 %1550, ptr %114, align 8\l  %1551 = load i64, ptr %114, align 8\l  %1552 = load ptr, ptr %8, align 8\l  %1553 = getelementptr inbounds [8 x i64], ptr %1552, i64 5\l  %1554 = load i32, ptr %6, align 4\l  %1555 = zext i32 %1554 to i64\l  %1556 = getelementptr inbounds [8 x i64], ptr %1553, i64 0, i64 %1555\l  store i64 %1551, ptr %1556, align 8\l  %1557 = load i64, ptr %354, align 8\l  %1558 = load i64, ptr %355, align 8\l  %1559 = load i64, ptr %92, align 8\l  %1560 = load i64, ptr %93, align 8\l  %1561 = sub nsw i64 %1559, %1560\l  %1562 = call i32 @MAD_F_MLX(i64 noundef %1557, i64 noundef %1558, i64\l... noundef %1561, i64 noundef 248002024)\l  %1563 = load i64, ptr %354, align 8\l  %1564 = shl i64 %1563, 4\l  %1565 = load i64, ptr %355, align 8\l  %1566 = lshr i64 %1565, 28\l  %1567 = or i64 %1564, %1566\l  store i64 %1567, ptr %356, align 8\l  %1568 = load i64, ptr %356, align 8\l  store i64 %1568, ptr %161, align 8\l  %1569 = load i64, ptr %357, align 8\l  %1570 = load i64, ptr %358, align 8\l  %1571 = load i64, ptr %94, align 8\l  %1572 = load i64, ptr %95, align 8\l  %1573 = sub nsw i64 %1571, %1572\l  %1574 = call i32 @MAD_F_MLX(i64 noundef %1569, i64 noundef %1570, i64\l... noundef %1573, i64 noundef 102725802)\l  %1575 = load i64, ptr %357, align 8\l  %1576 = shl i64 %1575, 4\l  %1577 = load i64, ptr %358, align 8\l  %1578 = lshr i64 %1577, 28\l  %1579 = or i64 %1576, %1578\l  store i64 %1579, ptr %359, align 8\l  %1580 = load i64, ptr %359, align 8\l  store i64 %1580, ptr %162, align 8\l  %1581 = load i64, ptr %161, align 8\l  %1582 = load i64, ptr %162, align 8\l  %1583 = add nsw i64 %1581, %1582\l  store i64 %1583, ptr %163, align 8\l  %1584 = load i64, ptr %163, align 8\l  %1585 = mul nsw i64 %1584, 2\l  %1586 = load i64, ptr %96, align 8\l  %1587 = sub nsw i64 %1585, %1586\l  store i64 %1587, ptr %120, align 8\l  %1588 = load i64, ptr %120, align 8\l  %1589 = mul nsw i64 %1588, 2\l  %1590 = load i64, ptr %97, align 8\l  %1591 = sub nsw i64 %1589, %1590\l  store i64 %1591, ptr %108, align 8\l  %1592 = load i64, ptr %108, align 8\l  %1593 = load ptr, ptr %8, align 8\l  %1594 = getelementptr inbounds [8 x i64], ptr %1593, i64 4\l  %1595 = load i32, ptr %6, align 4\l  %1596 = zext i32 %1595 to i64\l  %1597 = getelementptr inbounds [8 x i64], ptr %1594, i64 0, i64 %1596\l  store i64 %1592, ptr %1597, align 8\l  %1598 = load i64, ptr %360, align 8\l  %1599 = load i64, ptr %361, align 8\l  %1600 = load i64, ptr %98, align 8\l  %1601 = load i64, ptr %99, align 8\l  %1602 = sub nsw i64 %1600, %1601\l  %1603 = call i32 @MAD_F_MLX(i64 noundef %1598, i64 noundef %1599, i64\l... noundef %1602, i64 noundef 248002024)\l  %1604 = load i64, ptr %360, align 8\l  %1605 = shl i64 %1604, 4\l  %1606 = load i64, ptr %361, align 8\l  %1607 = lshr i64 %1606, 28\l  %1608 = or i64 %1605, %1607\l  store i64 %1608, ptr %362, align 8\l  %1609 = load i64, ptr %362, align 8\l  store i64 %1609, ptr %166, align 8\l  %1610 = load i64, ptr %363, align 8\l  %1611 = load i64, ptr %364, align 8\l  %1612 = load i64, ptr %100, align 8\l  %1613 = load i64, ptr %101, align 8\l  %1614 = sub nsw i64 %1612, %1613\l  %1615 = call i32 @MAD_F_MLX(i64 noundef %1610, i64 noundef %1611, i64\l... noundef %1614, i64 noundef 102725802)\l  %1616 = load i64, ptr %363, align 8\l  %1617 = shl i64 %1616, 4\l  %1618 = load i64, ptr %364, align 8\l  %1619 = lshr i64 %1618, 28\l  %1620 = or i64 %1617, %1619\l  store i64 %1620, ptr %365, align 8\l  %1621 = load i64, ptr %365, align 8\l  store i64 %1621, ptr %167, align 8\l  %1622 = load i64, ptr %166, align 8\l  %1623 = load i64, ptr %167, align 8\l  %1624 = add nsw i64 %1622, %1623\l  store i64 %1624, ptr %168, align 8\l  %1625 = load i64, ptr %168, align 8\l  %1626 = mul nsw i64 %1625, 2\l  %1627 = load i64, ptr %102, align 8\l  %1628 = sub nsw i64 %1626, %1627\l  store i64 %1628, ptr %136, align 8\l  %1629 = load i64, ptr %136, align 8\l  %1630 = load ptr, ptr %8, align 8\l  %1631 = getelementptr inbounds [8 x i64], ptr %1630, i64 3\l  %1632 = load i32, ptr %6, align 4\l  %1633 = zext i32 %1632 to i64\l  %1634 = getelementptr inbounds [8 x i64], ptr %1631, i64 0, i64 %1633\l  store i64 %1629, ptr %1634, align 8\l  %1635 = load i64, ptr %366, align 8\l  %1636 = load i64, ptr %367, align 8\l  %1637 = load i64, ptr %134, align 8\l  %1638 = load i64, ptr %135, align 8\l  %1639 = sub nsw i64 %1637, %1638\l  %1640 = call i32 @MAD_F_MLX(i64 noundef %1635, i64 noundef %1636, i64\l... noundef %1639, i64 noundef 189812531)\l  %1641 = load i64, ptr %366, align 8\l  %1642 = shl i64 %1641, 4\l  %1643 = load i64, ptr %367, align 8\l  %1644 = lshr i64 %1643, 28\l  %1645 = or i64 %1642, %1644\l  store i64 %1645, ptr %368, align 8\l  %1646 = load i64, ptr %368, align 8\l  %1647 = mul nsw i64 %1646, 2\l  %1648 = load i64, ptr %136, align 8\l  %1649 = sub nsw i64 %1647, %1648\l  store i64 %1649, ptr %169, align 8\l  %1650 = load i64, ptr %169, align 8\l  %1651 = load ptr, ptr %7, align 8\l  %1652 = getelementptr inbounds [8 x i64], ptr %1651, i64 4\l  %1653 = load i32, ptr %6, align 4\l  %1654 = zext i32 %1653 to i64\l  %1655 = getelementptr inbounds [8 x i64], ptr %1652, i64 0, i64 %1654\l  store i64 %1650, ptr %1655, align 8\l  %1656 = load i64, ptr %369, align 8\l  %1657 = load i64, ptr %370, align 8\l  %1658 = load i64, ptr %166, align 8\l  %1659 = load i64, ptr %167, align 8\l  %1660 = sub nsw i64 %1658, %1659\l  %1661 = call i32 @MAD_F_MLX(i64 noundef %1656, i64 noundef %1657, i64\l... noundef %1660, i64 noundef 189812531)\l  %1662 = load i64, ptr %369, align 8\l  %1663 = shl i64 %1662, 4\l  %1664 = load i64, ptr %370, align 8\l  %1665 = lshr i64 %1664, 28\l  %1666 = or i64 %1663, %1665\l  store i64 %1666, ptr %371, align 8\l  %1667 = load i64, ptr %371, align 8\l  %1668 = mul nsw i64 %1667, 2\l  %1669 = load i64, ptr %168, align 8\l  %1670 = sub nsw i64 %1668, %1669\l  %1671 = mul nsw i64 %1670, 2\l  %1672 = load i64, ptr %169, align 8\l  %1673 = sub nsw i64 %1671, %1672\l  %1674 = load ptr, ptr %7, align 8\l  %1675 = getelementptr inbounds [8 x i64], ptr %1674, i64 12\l  %1676 = load i32, ptr %6, align 4\l  %1677 = zext i32 %1676 to i64\l  %1678 = getelementptr inbounds [8 x i64], ptr %1675, i64 0, i64 %1677\l  store i64 %1673, ptr %1678, align 8\l  %1679 = load i64, ptr %372, align 8\l  %1680 = load i64, ptr %373, align 8\l  %1681 = load i64, ptr %103, align 8\l  %1682 = load i64, ptr %104, align 8\l  %1683 = sub nsw i64 %1681, %1682\l  %1684 = call i32 @MAD_F_MLX(i64 noundef %1679, i64 noundef %1680, i64\l... noundef %1683, i64 noundef 248002024)\l  %1685 = load i64, ptr %372, align 8\l  %1686 = shl i64 %1685, 4\l  %1687 = load i64, ptr %373, align 8\l  %1688 = lshr i64 %1687, 28\l  %1689 = or i64 %1686, %1688\l  store i64 %1689, ptr %374, align 8\l  %1690 = load i64, ptr %374, align 8\l  store i64 %1690, ptr %170, align 8\l  %1691 = load i64, ptr %375, align 8\l  %1692 = load i64, ptr %376, align 8\l  %1693 = load i64, ptr %105, align 8\l  %1694 = load i64, ptr %106, align 8\l  %1695 = sub nsw i64 %1693, %1694\l  %1696 = call i32 @MAD_F_MLX(i64 noundef %1691, i64 noundef %1692, i64\l... noundef %1695, i64 noundef 102725802)\l  %1697 = load i64, ptr %375, align 8\l  %1698 = shl i64 %1697, 4\l  %1699 = load i64, ptr %376, align 8\l  %1700 = lshr i64 %1699, 28\l  %1701 = or i64 %1698, %1700\l  store i64 %1701, ptr %377, align 8\l  %1702 = load i64, ptr %377, align 8\l  store i64 %1702, ptr %171, align 8\l  %1703 = load i64, ptr %170, align 8\l  %1704 = load i64, ptr %171, align 8\l  %1705 = add nsw i64 %1703, %1704\l  store i64 %1705, ptr %172, align 8\l  %1706 = load i64, ptr %172, align 8\l  %1707 = mul nsw i64 %1706, 2\l  %1708 = load i64, ptr %107, align 8\l  %1709 = sub nsw i64 %1707, %1708\l  store i64 %1709, ptr %139, align 8\l  %1710 = load i64, ptr %139, align 8\l  %1711 = mul nsw i64 %1710, 2\l  %1712 = load i64, ptr %108, align 8\l  %1713 = sub nsw i64 %1711, %1712\l  store i64 %1713, ptr %121, align 8\l  %1714 = load i64, ptr %121, align 8\l  %1715 = load ptr, ptr %8, align 8\l  %1716 = getelementptr inbounds [8 x i64], ptr %1715, i64 2\l  %1717 = load i32, ptr %6, align 4\l  %1718 = zext i32 %1717 to i64\l  %1719 = getelementptr inbounds [8 x i64], ptr %1716, i64 0, i64 %1718\l  store i64 %1714, ptr %1719, align 8\l  %1720 = load i64, ptr %378, align 8\l  %1721 = load i64, ptr %379, align 8\l  %1722 = load i64, ptr %137, align 8\l  %1723 = load i64, ptr %138, align 8\l  %1724 = sub nsw i64 %1722, %1723\l  %1725 = call i32 @MAD_F_MLX(i64 noundef %1720, i64 noundef %1721, i64\l... noundef %1724, i64 noundef 189812531)\l  %1726 = load i64, ptr %378, align 8\l  %1727 = shl i64 %1726, 4\l  %1728 = load i64, ptr %379, align 8\l  %1729 = lshr i64 %1728, 28\l  %1730 = or i64 %1727, %1729\l  store i64 %1730, ptr %380, align 8\l  %1731 = load i64, ptr %380, align 8\l  %1732 = mul nsw i64 %1731, 2\l  %1733 = load i64, ptr %139, align 8\l  %1734 = sub nsw i64 %1732, %1733\l  store i64 %1734, ptr %173, align 8\l  %1735 = load i64, ptr %381, align 8\l  %1736 = load i64, ptr %382, align 8\l  %1737 = load i64, ptr %109, align 8\l  %1738 = load i64, ptr %110, align 8\l  %1739 = sub nsw i64 %1737, %1738\l  %1740 = call i32 @MAD_F_MLX(i64 noundef %1735, i64 noundef %1736, i64\l... noundef %1739, i64 noundef 248002024)\l  %1741 = load i64, ptr %381, align 8\l  %1742 = shl i64 %1741, 4\l  %1743 = load i64, ptr %382, align 8\l  %1744 = lshr i64 %1743, 28\l  %1745 = or i64 %1742, %1744\l  store i64 %1745, ptr %383, align 8\l  %1746 = load i64, ptr %383, align 8\l  store i64 %1746, ptr %175, align 8\l  %1747 = load i64, ptr %384, align 8\l  %1748 = load i64, ptr %385, align 8\l  %1749 = load i64, ptr %111, align 8\l  %1750 = load i64, ptr %112, align 8\l  %1751 = sub nsw i64 %1749, %1750\l  %1752 = call i32 @MAD_F_MLX(i64 noundef %1747, i64 noundef %1748, i64\l... noundef %1751, i64 noundef 102725802)\l  %1753 = load i64, ptr %384, align 8\l  %1754 = shl i64 %1753, 4\l  %1755 = load i64, ptr %385, align 8\l  %1756 = lshr i64 %1755, 28\l  %1757 = or i64 %1754, %1756\l  store i64 %1757, ptr %386, align 8\l  %1758 = load i64, ptr %386, align 8\l  store i64 %1758, ptr %176, align 8\l  %1759 = load i64, ptr %175, align 8\l  %1760 = load i64, ptr %176, align 8\l  %1761 = add nsw i64 %1759, %1760\l  store i64 %1761, ptr %177, align 8\l  %1762 = load i64, ptr %177, align 8\l  %1763 = mul nsw i64 %1762, 2\l  %1764 = load i64, ptr %113, align 8\l  %1765 = sub nsw i64 %1763, %1764\l  store i64 %1765, ptr %143, align 8\l  %1766 = load i64, ptr %143, align 8\l  %1767 = mul nsw i64 %1766, 2\l  %1768 = load i64, ptr %114, align 8\l  %1769 = sub nsw i64 %1767, %1768\l  store i64 %1769, ptr %129, align 8\l  %1770 = load i64, ptr %129, align 8\l  %1771 = load ptr, ptr %8, align 8\l  %1772 = getelementptr inbounds [8 x i64], ptr %1771, i64 1\l  %1773 = load i32, ptr %6, align 4\l  %1774 = zext i32 %1773 to i64\l  %1775 = getelementptr inbounds [8 x i64], ptr %1772, i64 0, i64 %1774\l  store i64 %1770, ptr %1775, align 8\l  %1776 = load i64, ptr %387, align 8\l  %1777 = load i64, ptr %388, align 8\l  %1778 = load i64, ptr %127, align 8\l  %1779 = load i64, ptr %128, align 8\l  %1780 = sub nsw i64 %1778, %1779\l  %1781 = call i32 @MAD_F_MLX(i64 noundef %1776, i64 noundef %1777, i64\l... noundef %1780, i64 noundef 189812531)\l  %1782 = load i64, ptr %387, align 8\l  %1783 = shl i64 %1782, 4\l  %1784 = load i64, ptr %388, align 8\l  %1785 = lshr i64 %1784, 28\l  %1786 = or i64 %1783, %1785\l  store i64 %1786, ptr %389, align 8\l  %1787 = load i64, ptr %389, align 8\l  %1788 = mul nsw i64 %1787, 2\l  %1789 = load i64, ptr %129, align 8\l  %1790 = sub nsw i64 %1788, %1789\l  store i64 %1790, ptr %144, align 8\l  %1791 = load i64, ptr %144, align 8\l  %1792 = load ptr, ptr %7, align 8\l  %1793 = getelementptr inbounds [8 x i64], ptr %1792, i64 2\l  %1794 = load i32, ptr %6, align 4\l  %1795 = zext i32 %1794 to i64\l  %1796 = getelementptr inbounds [8 x i64], ptr %1793, i64 0, i64 %1795\l  store i64 %1791, ptr %1796, align 8\l  %1797 = load i64, ptr %390, align 8\l  %1798 = load i64, ptr %391, align 8\l  %1799 = load i64, ptr %141, align 8\l  %1800 = load i64, ptr %142, align 8\l  %1801 = sub nsw i64 %1799, %1800\l  %1802 = call i32 @MAD_F_MLX(i64 noundef %1797, i64 noundef %1798, i64\l... noundef %1801, i64 noundef 189812531)\l  %1803 = load i64, ptr %390, align 8\l  %1804 = shl i64 %1803, 4\l  %1805 = load i64, ptr %391, align 8\l  %1806 = lshr i64 %1805, 28\l  %1807 = or i64 %1804, %1806\l  store i64 %1807, ptr %392, align 8\l  %1808 = load i64, ptr %392, align 8\l  %1809 = mul nsw i64 %1808, 2\l  %1810 = load i64, ptr %143, align 8\l  %1811 = sub nsw i64 %1809, %1810\l  store i64 %1811, ptr %178, align 8\l  %1812 = load i64, ptr %178, align 8\l  %1813 = mul nsw i64 %1812, 2\l  %1814 = load i64, ptr %144, align 8\l  %1815 = sub nsw i64 %1813, %1814\l  store i64 %1815, ptr %160, align 8\l  %1816 = load i64, ptr %160, align 8\l  %1817 = load ptr, ptr %7, align 8\l  %1818 = getelementptr inbounds [8 x i64], ptr %1817, i64 6\l  %1819 = load i32, ptr %6, align 4\l  %1820 = zext i32 %1819 to i64\l  %1821 = getelementptr inbounds [8 x i64], ptr %1818, i64 0, i64 %1820\l  store i64 %1816, ptr %1821, align 8\l  %1822 = load i64, ptr %393, align 8\l  %1823 = load i64, ptr %394, align 8\l  %1824 = load i64, ptr %157, align 8\l  %1825 = load i64, ptr %158, align 8\l  %1826 = sub nsw i64 %1824, %1825\l  %1827 = call i32 @MAD_F_MLX(i64 noundef %1822, i64 noundef %1823, i64\l... noundef %1826, i64 noundef 189812531)\l  %1828 = load i64, ptr %393, align 8\l  %1829 = shl i64 %1828, 4\l  %1830 = load i64, ptr %394, align 8\l  %1831 = lshr i64 %1830, 28\l  %1832 = or i64 %1829, %1831\l  store i64 %1832, ptr %395, align 8\l  %1833 = load i64, ptr %395, align 8\l  %1834 = mul nsw i64 %1833, 2\l  %1835 = load i64, ptr %159, align 8\l  %1836 = sub nsw i64 %1834, %1835\l  %1837 = mul nsw i64 %1836, 2\l  %1838 = load i64, ptr %160, align 8\l  %1839 = sub nsw i64 %1837, %1838\l  store i64 %1839, ptr %179, align 8\l  %1840 = load i64, ptr %179, align 8\l  %1841 = load ptr, ptr %7, align 8\l  %1842 = getelementptr inbounds [8 x i64], ptr %1841, i64 10\l  %1843 = load i32, ptr %6, align 4\l  %1844 = zext i32 %1843 to i64\l  %1845 = getelementptr inbounds [8 x i64], ptr %1842, i64 0, i64 %1844\l  store i64 %1840, ptr %1845, align 8\l  %1846 = load i64, ptr %396, align 8\l  %1847 = load i64, ptr %397, align 8\l  %1848 = load i64, ptr %175, align 8\l  %1849 = load i64, ptr %176, align 8\l  %1850 = sub nsw i64 %1848, %1849\l  %1851 = call i32 @MAD_F_MLX(i64 noundef %1846, i64 noundef %1847, i64\l... noundef %1850, i64 noundef 189812531)\l  %1852 = load i64, ptr %396, align 8\l  %1853 = shl i64 %1852, 4\l  %1854 = load i64, ptr %397, align 8\l  %1855 = lshr i64 %1854, 28\l  %1856 = or i64 %1853, %1855\l  store i64 %1856, ptr %398, align 8\l  %1857 = load i64, ptr %398, align 8\l  %1858 = mul nsw i64 %1857, 2\l  %1859 = load i64, ptr %177, align 8\l  %1860 = sub nsw i64 %1858, %1859\l  %1861 = mul nsw i64 %1860, 2\l  %1862 = load i64, ptr %178, align 8\l  %1863 = sub nsw i64 %1861, %1862\l  %1864 = mul nsw i64 %1863, 2\l  %1865 = load i64, ptr %179, align 8\l  %1866 = sub nsw i64 %1864, %1865\l  %1867 = load ptr, ptr %7, align 8\l  %1868 = getelementptr inbounds [8 x i64], ptr %1867, i64 14\l  %1869 = load i32, ptr %6, align 4\l  %1870 = zext i32 %1869 to i64\l  %1871 = getelementptr inbounds [8 x i64], ptr %1868, i64 0, i64 %1870\l  store i64 %1866, ptr %1871, align 8\l  %1872 = load i64, ptr %399, align 8\l  %1873 = load i64, ptr %400, align 8\l  %1874 = load i64, ptr %115, align 8\l  %1875 = load i64, ptr %116, align 8\l  %1876 = sub nsw i64 %1874, %1875\l  %1877 = call i32 @MAD_F_MLX(i64 noundef %1872, i64 noundef %1873, i64\l... noundef %1876, i64 noundef 248002024)\l  %1878 = load i64, ptr %399, align 8\l  %1879 = shl i64 %1878, 4\l  %1880 = load i64, ptr %400, align 8\l  %1881 = lshr i64 %1880, 28\l  %1882 = or i64 %1879, %1881\l  store i64 %1882, ptr %401, align 8\l  %1883 = load i64, ptr %401, align 8\l  store i64 %1883, ptr %180, align 8\l  %1884 = load i64, ptr %402, align 8\l  %1885 = load i64, ptr %403, align 8\l  %1886 = load i64, ptr %117, align 8\l  %1887 = load i64, ptr %118, align 8\l  %1888 = sub nsw i64 %1886, %1887\l  %1889 = call i32 @MAD_F_MLX(i64 noundef %1884, i64 noundef %1885, i64\l... noundef %1888, i64 noundef 102725802)\l  %1890 = load i64, ptr %402, align 8\l  %1891 = shl i64 %1890, 4\l  %1892 = load i64, ptr %403, align 8\l  %1893 = lshr i64 %1892, 28\l  %1894 = or i64 %1891, %1893\l  store i64 %1894, ptr %404, align 8\l  %1895 = load i64, ptr %404, align 8\l  store i64 %1895, ptr %181, align 8\l  %1896 = load i64, ptr %180, align 8\l  %1897 = load i64, ptr %181, align 8\l  %1898 = add nsw i64 %1896, %1897\l  store i64 %1898, ptr %182, align 8\l  %1899 = load i64, ptr %182, align 8\l  %1900 = mul nsw i64 %1899, 2\l  %1901 = load i64, ptr %119, align 8\l  %1902 = sub nsw i64 %1900, %1901\l  store i64 %1902, ptr %147, align 8\l  %1903 = load i64, ptr %147, align 8\l  %1904 = mul nsw i64 %1903, 2\l  %1905 = load i64, ptr %120, align 8\l  %1906 = sub nsw i64 %1904, %1905\l  store i64 %1906, ptr %132, align 8\l  %1907 = load i64, ptr %405, align 8\l  %1908 = load i64, ptr %406, align 8\l  %1909 = load i64, ptr %130, align 8\l  %1910 = load i64, ptr %131, align 8\l  %1911 = sub nsw i64 %1909, %1910\l  %1912 = call i32 @MAD_F_MLX(i64 noundef %1907, i64 noundef %1908, i64\l... noundef %1911, i64 noundef 189812531)\l  %1913 = load i64, ptr %405, align 8\l  %1914 = shl i64 %1913, 4\l  %1915 = load i64, ptr %406, align 8\l  %1916 = lshr i64 %1915, 28\l  %1917 = or i64 %1914, %1916\l  store i64 %1917, ptr %407, align 8\l  %1918 = load i64, ptr %407, align 8\l  %1919 = mul nsw i64 %1918, 2\l  %1920 = load i64, ptr %132, align 8\l  %1921 = sub nsw i64 %1919, %1920\l  store i64 %1921, ptr %148, align 8\l  %1922 = load i64, ptr %132, align 8\l  %1923 = mul nsw i64 %1922, 2\l  %1924 = load i64, ptr %121, align 8\l  %1925 = sub nsw i64 %1923, %1924\l  store i64 %1925, ptr %126, align 8\l  %1926 = load i64, ptr %126, align 8\l  %1927 = load ptr, ptr %8, align 8\l  %1928 = getelementptr inbounds [8 x i64], ptr %1927, i64 0\l  %1929 = load i32, ptr %6, align 4\l  %1930 = zext i32 %1929 to i64\l  %1931 = getelementptr inbounds [8 x i64], ptr %1928, i64 0, i64 %1930\l  store i64 %1926, ptr %1931, align 8\l  %1932 = load i64, ptr %408, align 8\l  %1933 = load i64, ptr %409, align 8\l  %1934 = load i64, ptr %124, align 8\l  %1935 = load i64, ptr %125, align 8\l  %1936 = sub nsw i64 %1934, %1935\l  %1937 = call i32 @MAD_F_MLX(i64 noundef %1932, i64 noundef %1933, i64\l... noundef %1936, i64 noundef 189812531)\l  %1938 = load i64, ptr %408, align 8\l  %1939 = shl i64 %1938, 4\l  %1940 = load i64, ptr %409, align 8\l  %1941 = lshr i64 %1940, 28\l  %1942 = or i64 %1939, %1941\l  store i64 %1942, ptr %410, align 8\l  %1943 = load i64, ptr %410, align 8\l  %1944 = mul nsw i64 %1943, 2\l  %1945 = load i64, ptr %126, align 8\l  %1946 = sub nsw i64 %1944, %1945\l  store i64 %1946, ptr %133, align 8\l  %1947 = load i64, ptr %133, align 8\l  %1948 = load ptr, ptr %7, align 8\l  %1949 = getelementptr inbounds [8 x i64], ptr %1948, i64 1\l  %1950 = load i32, ptr %6, align 4\l  %1951 = zext i32 %1950 to i64\l  %1952 = getelementptr inbounds [8 x i64], ptr %1949, i64 0, i64 %1951\l  store i64 %1947, ptr %1952, align 8\l  %1953 = load i64, ptr %148, align 8\l  %1954 = mul nsw i64 %1953, 2\l  %1955 = load i64, ptr %133, align 8\l  %1956 = sub nsw i64 %1954, %1955\l  store i64 %1956, ptr %140, align 8\l  %1957 = load i64, ptr %140, align 8\l  %1958 = load ptr, ptr %7, align 8\l  %1959 = getelementptr inbounds [8 x i64], ptr %1958, i64 3\l  %1960 = load i32, ptr %6, align 4\l  %1961 = zext i32 %1960 to i64\l  %1962 = getelementptr inbounds [8 x i64], ptr %1959, i64 0, i64 %1961\l  store i64 %1957, ptr %1962, align 8\l  %1963 = load i64, ptr %173, align 8\l  %1964 = mul nsw i64 %1963, 2\l  %1965 = load i64, ptr %140, align 8\l  %1966 = sub nsw i64 %1964, %1965\l  store i64 %1966, ptr %149, align 8\l  %1967 = load i64, ptr %149, align 8\l  %1968 = load ptr, ptr %7, align 8\l  %1969 = getelementptr inbounds [8 x i64], ptr %1968, i64 5\l  %1970 = load i32, ptr %6, align 4\l  %1971 = zext i32 %1970 to i64\l  %1972 = getelementptr inbounds [8 x i64], ptr %1969, i64 0, i64 %1971\l  store i64 %1967, ptr %1972, align 8\l  %1973 = load i64, ptr %411, align 8\l  %1974 = load i64, ptr %412, align 8\l  %1975 = load i64, ptr %145, align 8\l  %1976 = load i64, ptr %146, align 8\l  %1977 = sub nsw i64 %1975, %1976\l  %1978 = call i32 @MAD_F_MLX(i64 noundef %1973, i64 noundef %1974, i64\l... noundef %1977, i64 noundef 189812531)\l  %1979 = load i64, ptr %411, align 8\l  %1980 = shl i64 %1979, 4\l  %1981 = load i64, ptr %412, align 8\l  %1982 = lshr i64 %1981, 28\l  %1983 = or i64 %1980, %1982\l  store i64 %1983, ptr %413, align 8\l  %1984 = load i64, ptr %413, align 8\l  %1985 = mul nsw i64 %1984, 2\l  %1986 = load i64, ptr %147, align 8\l  %1987 = sub nsw i64 %1985, %1986\l  store i64 %1987, ptr %183, align 8\l  %1988 = load i64, ptr %183, align 8\l  %1989 = mul nsw i64 %1988, 2\l  %1990 = load i64, ptr %148, align 8\l  %1991 = sub nsw i64 %1989, %1990\l  store i64 %1991, ptr %164, align 8\l  %1992 = load i64, ptr %164, align 8\l  %1993 = mul nsw i64 %1992, 2\l  %1994 = load i64, ptr %149, align 8\l  %1995 = sub nsw i64 %1993, %1994\l  store i64 %1995, ptr %156, align 8\l  %1996 = load i64, ptr %156, align 8\l  %1997 = load ptr, ptr %7, align 8\l  %1998 = getelementptr inbounds [8 x i64], ptr %1997, i64 7\l  %1999 = load i32, ptr %6, align 4\l  %2000 = zext i32 %1999 to i64\l  %2001 = getelementptr inbounds [8 x i64], ptr %1998, i64 0, i64 %2000\l  store i64 %1996, ptr %2001, align 8\l  %2002 = load i64, ptr %414, align 8\l  %2003 = load i64, ptr %415, align 8\l  %2004 = load i64, ptr %153, align 8\l  %2005 = load i64, ptr %154, align 8\l  %2006 = sub nsw i64 %2004, %2005\l  %2007 = call i32 @MAD_F_MLX(i64 noundef %2002, i64 noundef %2003, i64\l... noundef %2006, i64 noundef 189812531)\l  %2008 = load i64, ptr %414, align 8\l  %2009 = shl i64 %2008, 4\l  %2010 = load i64, ptr %415, align 8\l  %2011 = lshr i64 %2010, 28\l  %2012 = or i64 %2009, %2011\l  store i64 %2012, ptr %416, align 8\l  %2013 = load i64, ptr %416, align 8\l  %2014 = mul nsw i64 %2013, 2\l  %2015 = load i64, ptr %155, align 8\l  %2016 = sub nsw i64 %2014, %2015\l  %2017 = mul nsw i64 %2016, 2\l  %2018 = load i64, ptr %156, align 8\l  %2019 = sub nsw i64 %2017, %2018\l  store i64 %2019, ptr %165, align 8\l  %2020 = load i64, ptr %165, align 8\l  %2021 = load ptr, ptr %7, align 8\l  %2022 = getelementptr inbounds [8 x i64], ptr %2021, i64 9\l  %2023 = load i32, ptr %6, align 4\l  %2024 = zext i32 %2023 to i64\l  %2025 = getelementptr inbounds [8 x i64], ptr %2022, i64 0, i64 %2024\l  store i64 %2020, ptr %2025, align 8\l  %2026 = load i64, ptr %417, align 8\l  %2027 = load i64, ptr %418, align 8\l  %2028 = load i64, ptr %161, align 8\l  %2029 = load i64, ptr %162, align 8\l  %2030 = sub nsw i64 %2028, %2029\l  %2031 = call i32 @MAD_F_MLX(i64 noundef %2026, i64 noundef %2027, i64\l... noundef %2030, i64 noundef 189812531)\l  %2032 = load i64, ptr %417, align 8\l  %2033 = shl i64 %2032, 4\l  %2034 = load i64, ptr %418, align 8\l  %2035 = lshr i64 %2034, 28\l  %2036 = or i64 %2033, %2035\l  store i64 %2036, ptr %419, align 8\l  %2037 = load i64, ptr %419, align 8\l  %2038 = mul nsw i64 %2037, 2\l  %2039 = load i64, ptr %163, align 8\l  %2040 = sub nsw i64 %2038, %2039\l  %2041 = mul nsw i64 %2040, 2\l  %2042 = load i64, ptr %164, align 8\l  %2043 = sub nsw i64 %2041, %2042\l  store i64 %2043, ptr %184, align 8\l  %2044 = load i64, ptr %184, align 8\l  %2045 = mul nsw i64 %2044, 2\l  %2046 = load i64, ptr %165, align 8\l  %2047 = sub nsw i64 %2045, %2046\l  store i64 %2047, ptr %174, align 8\l  %2048 = load i64, ptr %174, align 8\l  %2049 = load ptr, ptr %7, align 8\l  %2050 = getelementptr inbounds [8 x i64], ptr %2049, i64 11\l  %2051 = load i32, ptr %6, align 4\l  %2052 = zext i32 %2051 to i64\l  %2053 = getelementptr inbounds [8 x i64], ptr %2050, i64 0, i64 %2052\l  store i64 %2048, ptr %2053, align 8\l  %2054 = load i64, ptr %420, align 8\l  %2055 = load i64, ptr %421, align 8\l  %2056 = load i64, ptr %170, align 8\l  %2057 = load i64, ptr %171, align 8\l  %2058 = sub nsw i64 %2056, %2057\l  %2059 = call i32 @MAD_F_MLX(i64 noundef %2054, i64 noundef %2055, i64\l... noundef %2058, i64 noundef 189812531)\l  %2060 = load i64, ptr %420, align 8\l  %2061 = shl i64 %2060, 4\l  %2062 = load i64, ptr %421, align 8\l  %2063 = lshr i64 %2062, 28\l  %2064 = or i64 %2061, %2063\l  store i64 %2064, ptr %422, align 8\l  %2065 = load i64, ptr %422, align 8\l  %2066 = mul nsw i64 %2065, 2\l  %2067 = load i64, ptr %172, align 8\l  %2068 = sub nsw i64 %2066, %2067\l  %2069 = mul nsw i64 %2068, 2\l  %2070 = load i64, ptr %173, align 8\l  %2071 = sub nsw i64 %2069, %2070\l  %2072 = mul nsw i64 %2071, 2\l  %2073 = load i64, ptr %174, align 8\l  %2074 = sub nsw i64 %2072, %2073\l  store i64 %2074, ptr %185, align 8\l  %2075 = load i64, ptr %185, align 8\l  %2076 = load ptr, ptr %7, align 8\l  %2077 = getelementptr inbounds [8 x i64], ptr %2076, i64 13\l  %2078 = load i32, ptr %6, align 4\l  %2079 = zext i32 %2078 to i64\l  %2080 = getelementptr inbounds [8 x i64], ptr %2077, i64 0, i64 %2079\l  store i64 %2075, ptr %2080, align 8\l  %2081 = load i64, ptr %423, align 8\l  %2082 = load i64, ptr %424, align 8\l  %2083 = load i64, ptr %180, align 8\l  %2084 = load i64, ptr %181, align 8\l  %2085 = sub nsw i64 %2083, %2084\l  %2086 = call i32 @MAD_F_MLX(i64 noundef %2081, i64 noundef %2082, i64\l... noundef %2085, i64 noundef 189812531)\l  %2087 = load i64, ptr %423, align 8\l  %2088 = shl i64 %2087, 4\l  %2089 = load i64, ptr %424, align 8\l  %2090 = lshr i64 %2089, 28\l  %2091 = or i64 %2088, %2090\l  store i64 %2091, ptr %425, align 8\l  %2092 = load i64, ptr %425, align 8\l  %2093 = mul nsw i64 %2092, 2\l  %2094 = load i64, ptr %182, align 8\l  %2095 = sub nsw i64 %2093, %2094\l  %2096 = mul nsw i64 %2095, 2\l  %2097 = load i64, ptr %183, align 8\l  %2098 = sub nsw i64 %2096, %2097\l  %2099 = mul nsw i64 %2098, 2\l  %2100 = load i64, ptr %184, align 8\l  %2101 = sub nsw i64 %2099, %2100\l  %2102 = mul nsw i64 %2101, 2\l  %2103 = load i64, ptr %185, align 8\l  %2104 = sub nsw i64 %2102, %2103\l  %2105 = load ptr, ptr %7, align 8\l  %2106 = getelementptr inbounds [8 x i64], ptr %2105, i64 15\l  %2107 = load i32, ptr %6, align 4\l  %2108 = zext i32 %2107 to i64\l  %2109 = getelementptr inbounds [8 x i64], ptr %2106, i64 0, i64 %2108\l  store i64 %2104, ptr %2109, align 8\l  ret void\l}"];
}
