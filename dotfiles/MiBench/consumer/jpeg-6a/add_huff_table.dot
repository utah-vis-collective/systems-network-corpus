digraph "CFG for 'add_huff_table' function" {
	label="CFG for 'add_huff_table' function";

	Node0x6000025bbe30 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{4:\l|  %5 = alloca ptr, align 8\l  %6 = alloca ptr, align 8\l  %7 = alloca ptr, align 8\l  %8 = alloca ptr, align 8\l  store ptr %0, ptr %5, align 8\l  store ptr %1, ptr %6, align 8\l  store ptr %2, ptr %7, align 8\l  store ptr %3, ptr %8, align 8\l  %9 = load ptr, ptr %6, align 8\l  %10 = load ptr, ptr %9, align 8\l  %11 = icmp eq ptr %10, null\l  br i1 %11, label %12, label %16\l|{<s0>T|<s1>F}}"];
	Node0x6000025bbe30:s0 -> Node0x6000025bbe80[tooltip="4 -> 12\nProbability 37.50%" ];
	Node0x6000025bbe30:s1 -> Node0x6000025bbed0[tooltip="4 -> 16\nProbability 62.50%" ];
	Node0x6000025bbe80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c32e3170" fontname="Courier",label="{12:\l|  %13 = load ptr, ptr %5, align 8\l  %14 = call ptr @jpeg_alloc_huff_table(ptr noundef %13)\l  %15 = load ptr, ptr %6, align 8\l  store ptr %14, ptr %15, align 8\l  br label %16\l}"];
	Node0x6000025bbe80 -> Node0x6000025bbed0[tooltip="12 -> 16\nProbability 100.00%" ];
	Node0x6000025bbed0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{16:\l|  %17 = load ptr, ptr %6, align 8\l  %18 = load ptr, ptr %17, align 8\l  %19 = getelementptr inbounds %struct.JHUFF_TBL, ptr %18, i32 0, i32 0\l  %20 = getelementptr inbounds [17 x i8], ptr %19, i64 0, i64 0\l  %21 = load ptr, ptr %7, align 8\l  %22 = load ptr, ptr %6, align 8\l  %23 = load ptr, ptr %22, align 8\l  %24 = getelementptr inbounds %struct.JHUFF_TBL, ptr %23, i32 0, i32 0\l  %25 = getelementptr inbounds [17 x i8], ptr %24, i64 0, i64 0\l  %26 = call i64 @llvm.objectsize.i64.p0(ptr %25, i1 false, i1 true, i1 false)\l  %27 = call ptr @__memcpy_chk(ptr noundef %20, ptr noundef %21, i64 noundef\l... 17, i64 noundef %26) #4\l  %28 = load ptr, ptr %6, align 8\l  %29 = load ptr, ptr %28, align 8\l  %30 = getelementptr inbounds %struct.JHUFF_TBL, ptr %29, i32 0, i32 1\l  %31 = getelementptr inbounds [256 x i8], ptr %30, i64 0, i64 0\l  %32 = load ptr, ptr %8, align 8\l  %33 = load ptr, ptr %6, align 8\l  %34 = load ptr, ptr %33, align 8\l  %35 = getelementptr inbounds %struct.JHUFF_TBL, ptr %34, i32 0, i32 1\l  %36 = getelementptr inbounds [256 x i8], ptr %35, i64 0, i64 0\l  %37 = call i64 @llvm.objectsize.i64.p0(ptr %36, i1 false, i1 true, i1 false)\l  %38 = call ptr @__memcpy_chk(ptr noundef %31, ptr noundef %32, i64 noundef\l... 256, i64 noundef %37) #4\l  %39 = load ptr, ptr %6, align 8\l  %40 = load ptr, ptr %39, align 8\l  %41 = getelementptr inbounds %struct.JHUFF_TBL, ptr %40, i32 0, i32 2\l  store i32 0, ptr %41, align 4\l  ret void\l}"];
}
