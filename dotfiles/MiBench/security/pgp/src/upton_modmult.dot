digraph "CFG for 'upton_modmult' function" {
	label="CFG for 'upton_modmult' function";

	Node0x600001f95f40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{3:\l|  %4 = alloca ptr, align 8\l  %5 = alloca ptr, align 8\l  %6 = alloca ptr, align 8\l  %7 = alloca ptr, align 8\l  %8 = alloca ptr, align 8\l  %9 = alloca ptr, align 8\l  %10 = alloca ptr, align 8\l  %11 = alloca i16, align 2\l  store ptr %0, ptr %4, align 8\l  store ptr %1, ptr %5, align 8\l  store ptr %2, ptr %6, align 8\l  store ptr @d_data, ptr %7, align 8\l  store ptr @d_data, ptr %8, align 8\l  store ptr @e_data, ptr %9, align 8\l  store ptr @f_data, ptr %10, align 8\l  %12 = load i16, ptr @global_precision, align 2\l  store i16 %12, ptr %11, align 2\l  %13 = load ptr, ptr %7, align 8\l  %14 = load ptr, ptr %5, align 8\l  %15 = load ptr, ptr %6, align 8\l  call void @mp_dmul(ptr noundef %13, ptr noundef %14, ptr noundef %15)\l  %16 = load ptr, ptr %7, align 8\l  %17 = load i16, ptr @nbitsDivUNITSIZE, align 2\l  %18 = sext i16 %17 to i32\l  %19 = sext i32 %18 to i64\l  %20 = getelementptr inbounds i16, ptr %16, i64 %19\l  store ptr %20, ptr %8, align 8\l  %21 = load ptr, ptr %8, align 8\l  %22 = load i16, ptr @global_precision, align 2\l  %23 = sext i16 %22 to i32\l  %24 = shl i32 %23, 1\l  %25 = sext i32 %24 to i64\l  %26 = call ptr @__memcpy_chk(ptr noundef @dhi, ptr noundef %21, i64 noundef\l... %25, i64 noundef 260) #5\l  %27 = load i16, ptr @nbitsModUNITSIZE, align 2\l  call void @mp_shift_right_bits(ptr noundef @dhi, i16 noundef signext %27)\l  %28 = load ptr, ptr %9, align 8\l  call void @mp_dmul(ptr noundef %28, ptr noundef @dhi, ptr noundef\l... @reciprocal)\l  %29 = load i16, ptr @nbitsDivUNITSIZE, align 2\l  %30 = sext i16 %29 to i32\l  %31 = load ptr, ptr %9, align 8\l  %32 = sext i32 %30 to i64\l  %33 = getelementptr inbounds i16, ptr %31, i64 %32\l  store ptr %33, ptr %9, align 8\l  %34 = load ptr, ptr %9, align 8\l  %35 = load i16, ptr @nbitsModUNITSIZE, align 2\l  call void @mp_shift_right_bits(ptr noundef %34, i16 noundef signext %35)\l  %36 = load ptr, ptr %10, align 8\l  %37 = load ptr, ptr %9, align 8\l  call void @mp_dmul(ptr noundef %36, ptr noundef %37, ptr noundef @modulus)\l  %38 = load i16, ptr %11, align 2\l  %39 = sext i16 %38 to i32\l  %40 = mul nsw i32 %39, 2\l  %41 = trunc i32 %40 to i16\l  store i16 %41, ptr @global_precision, align 2\l  %42 = sext i16 %41 to i32\l  %43 = shl i32 %42, 4\l  %44 = trunc i32 %43 to i16\l  call void @P_SETP(i16 noundef signext %44)\l  %45 = load ptr, ptr %7, align 8\l  %46 = load ptr, ptr %10, align 8\l  %47 = call zeroext i8 @P_SUBB(ptr noundef %45, ptr noundef %46, i8 noundef\l... zeroext 0)\l  %48 = load i16, ptr %11, align 2\l  store i16 %48, ptr @global_precision, align 2\l  %49 = sext i16 %48 to i32\l  %50 = shl i32 %49, 4\l  %51 = trunc i32 %50 to i16\l  call void @P_SETP(i16 noundef signext %51)\l  br label %52\l}"];
	Node0x600001f95f40 -> Node0x600001f95f90[tooltip="3 -> 52\nProbability 100.00%" ];
	Node0x600001f95f90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{52:\l|  %53 = load ptr, ptr %7, align 8\l  %54 = call signext i16 @mp_compare(ptr noundef %53, ptr noundef @modulus)\l  %55 = sext i16 %54 to i32\l  %56 = icmp sgt i32 %55, 0\l  br i1 %56, label %57, label %60\l|{<s0>T|<s1>F}}"];
	Node0x600001f95f90:s0 -> Node0x600001f95fe0[tooltip="52 -> 57\nProbability 96.88%" ];
	Node0x600001f95f90:s1 -> Node0x600001f96030[tooltip="52 -> 60\nProbability 3.12%" ];
	Node0x600001f95fe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{57:\l|  %58 = load ptr, ptr %7, align 8\l  %59 = call zeroext i8 @P_SUBB(ptr noundef %58, ptr noundef @modulus, i8\l... noundef zeroext 0)\l  br label %52\l}"];
	Node0x600001f95fe0 -> Node0x600001f95f90[tooltip="57 -> 52\nProbability 100.00%" ];
	Node0x600001f96030 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{60:\l|  %61 = load ptr, ptr %4, align 8\l  %62 = load ptr, ptr %7, align 8\l  %63 = load i16, ptr @global_precision, align 2\l  %64 = sext i16 %63 to i32\l  %65 = shl i32 %64, 1\l  %66 = sext i32 %65 to i64\l  %67 = load ptr, ptr %4, align 8\l  %68 = call i64 @llvm.objectsize.i64.p0(ptr %67, i1 false, i1 true, i1 false)\l  %69 = call ptr @__memcpy_chk(ptr noundef %61, ptr noundef %62, i64 noundef\l... %66, i64 noundef %68) #5\l  ret i32 0\l}"];
}
