digraph "CFG for 'BF_ecb_encrypt' function" {
	label="CFG for 'BF_ecb_encrypt' function";

	Node0x600001815ef0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{4:\l|  %5 = alloca ptr, align 8\l  %6 = alloca ptr, align 8\l  %7 = alloca ptr, align 8\l  %8 = alloca i32, align 4\l  %9 = alloca i64, align 8\l  %10 = alloca [2 x i64], align 8\l  store ptr %0, ptr %5, align 8\l  store ptr %1, ptr %6, align 8\l  store ptr %2, ptr %7, align 8\l  store i32 %3, ptr %8, align 4\l  %11 = load ptr, ptr %5, align 8\l  %12 = getelementptr inbounds i8, ptr %11, i32 1\l  store ptr %12, ptr %5, align 8\l  %13 = load i8, ptr %11, align 1\l  %14 = zext i8 %13 to i64\l  %15 = shl i64 %14, 24\l  store i64 %15, ptr %9, align 8\l  %16 = load ptr, ptr %5, align 8\l  %17 = getelementptr inbounds i8, ptr %16, i32 1\l  store ptr %17, ptr %5, align 8\l  %18 = load i8, ptr %16, align 1\l  %19 = zext i8 %18 to i64\l  %20 = shl i64 %19, 16\l  %21 = load i64, ptr %9, align 8\l  %22 = or i64 %21, %20\l  store i64 %22, ptr %9, align 8\l  %23 = load ptr, ptr %5, align 8\l  %24 = getelementptr inbounds i8, ptr %23, i32 1\l  store ptr %24, ptr %5, align 8\l  %25 = load i8, ptr %23, align 1\l  %26 = zext i8 %25 to i64\l  %27 = shl i64 %26, 8\l  %28 = load i64, ptr %9, align 8\l  %29 = or i64 %28, %27\l  store i64 %29, ptr %9, align 8\l  %30 = load ptr, ptr %5, align 8\l  %31 = getelementptr inbounds i8, ptr %30, i32 1\l  store ptr %31, ptr %5, align 8\l  %32 = load i8, ptr %30, align 1\l  %33 = zext i8 %32 to i64\l  %34 = load i64, ptr %9, align 8\l  %35 = or i64 %34, %33\l  store i64 %35, ptr %9, align 8\l  %36 = load i64, ptr %9, align 8\l  %37 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 0\l  store i64 %36, ptr %37, align 8\l  %38 = load ptr, ptr %5, align 8\l  %39 = getelementptr inbounds i8, ptr %38, i32 1\l  store ptr %39, ptr %5, align 8\l  %40 = load i8, ptr %38, align 1\l  %41 = zext i8 %40 to i64\l  %42 = shl i64 %41, 24\l  store i64 %42, ptr %9, align 8\l  %43 = load ptr, ptr %5, align 8\l  %44 = getelementptr inbounds i8, ptr %43, i32 1\l  store ptr %44, ptr %5, align 8\l  %45 = load i8, ptr %43, align 1\l  %46 = zext i8 %45 to i64\l  %47 = shl i64 %46, 16\l  %48 = load i64, ptr %9, align 8\l  %49 = or i64 %48, %47\l  store i64 %49, ptr %9, align 8\l  %50 = load ptr, ptr %5, align 8\l  %51 = getelementptr inbounds i8, ptr %50, i32 1\l  store ptr %51, ptr %5, align 8\l  %52 = load i8, ptr %50, align 1\l  %53 = zext i8 %52 to i64\l  %54 = shl i64 %53, 8\l  %55 = load i64, ptr %9, align 8\l  %56 = or i64 %55, %54\l  store i64 %56, ptr %9, align 8\l  %57 = load ptr, ptr %5, align 8\l  %58 = getelementptr inbounds i8, ptr %57, i32 1\l  store ptr %58, ptr %5, align 8\l  %59 = load i8, ptr %57, align 1\l  %60 = zext i8 %59 to i64\l  %61 = load i64, ptr %9, align 8\l  %62 = or i64 %61, %60\l  store i64 %62, ptr %9, align 8\l  %63 = load i64, ptr %9, align 8\l  %64 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 1\l  store i64 %63, ptr %64, align 8\l  %65 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 0\l  %66 = load ptr, ptr %7, align 8\l  %67 = load i32, ptr %8, align 4\l  call void @BF_encrypt(ptr noundef %65, ptr noundef %66, i32 noundef %67)\l  %68 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 0\l  %69 = load i64, ptr %68, align 8\l  store i64 %69, ptr %9, align 8\l  %70 = load i64, ptr %9, align 8\l  %71 = lshr i64 %70, 24\l  %72 = and i64 %71, 255\l  %73 = trunc i64 %72 to i8\l  %74 = load ptr, ptr %6, align 8\l  %75 = getelementptr inbounds i8, ptr %74, i32 1\l  store ptr %75, ptr %6, align 8\l  store i8 %73, ptr %74, align 1\l  %76 = load i64, ptr %9, align 8\l  %77 = lshr i64 %76, 16\l  %78 = and i64 %77, 255\l  %79 = trunc i64 %78 to i8\l  %80 = load ptr, ptr %6, align 8\l  %81 = getelementptr inbounds i8, ptr %80, i32 1\l  store ptr %81, ptr %6, align 8\l  store i8 %79, ptr %80, align 1\l  %82 = load i64, ptr %9, align 8\l  %83 = lshr i64 %82, 8\l  %84 = and i64 %83, 255\l  %85 = trunc i64 %84 to i8\l  %86 = load ptr, ptr %6, align 8\l  %87 = getelementptr inbounds i8, ptr %86, i32 1\l  store ptr %87, ptr %6, align 8\l  store i8 %85, ptr %86, align 1\l  %88 = load i64, ptr %9, align 8\l  %89 = and i64 %88, 255\l  %90 = trunc i64 %89 to i8\l  %91 = load ptr, ptr %6, align 8\l  %92 = getelementptr inbounds i8, ptr %91, i32 1\l  store ptr %92, ptr %6, align 8\l  store i8 %90, ptr %91, align 1\l  %93 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 1\l  %94 = load i64, ptr %93, align 8\l  store i64 %94, ptr %9, align 8\l  %95 = load i64, ptr %9, align 8\l  %96 = lshr i64 %95, 24\l  %97 = and i64 %96, 255\l  %98 = trunc i64 %97 to i8\l  %99 = load ptr, ptr %6, align 8\l  %100 = getelementptr inbounds i8, ptr %99, i32 1\l  store ptr %100, ptr %6, align 8\l  store i8 %98, ptr %99, align 1\l  %101 = load i64, ptr %9, align 8\l  %102 = lshr i64 %101, 16\l  %103 = and i64 %102, 255\l  %104 = trunc i64 %103 to i8\l  %105 = load ptr, ptr %6, align 8\l  %106 = getelementptr inbounds i8, ptr %105, i32 1\l  store ptr %106, ptr %6, align 8\l  store i8 %104, ptr %105, align 1\l  %107 = load i64, ptr %9, align 8\l  %108 = lshr i64 %107, 8\l  %109 = and i64 %108, 255\l  %110 = trunc i64 %109 to i8\l  %111 = load ptr, ptr %6, align 8\l  %112 = getelementptr inbounds i8, ptr %111, i32 1\l  store ptr %112, ptr %6, align 8\l  store i8 %110, ptr %111, align 1\l  %113 = load i64, ptr %9, align 8\l  %114 = and i64 %113, 255\l  %115 = trunc i64 %114 to i8\l  %116 = load ptr, ptr %6, align 8\l  %117 = getelementptr inbounds i8, ptr %116, i32 1\l  store ptr %117, ptr %6, align 8\l  store i8 %115, ptr %116, align 1\l  %118 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 1\l  store i64 0, ptr %118, align 8\l  %119 = getelementptr inbounds [2 x i64], ptr %10, i64 0, i64 0\l  store i64 0, ptr %119, align 8\l  store i64 0, ptr %9, align 8\l  ret void\l}"];
}
