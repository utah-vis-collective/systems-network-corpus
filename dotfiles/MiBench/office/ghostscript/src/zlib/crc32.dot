digraph "CFG for 'crc32' function" {
	label="CFG for 'crc32' function";

	Node0x60000227def0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070" fontname="Courier",label="{3:\l|  %4 = alloca i64, align 8\l  %5 = alloca i64, align 8\l  %6 = alloca ptr, align 8\l  %7 = alloca i32, align 4\l  store i64 %0, ptr %5, align 8\l  store ptr %1, ptr %6, align 8\l  store i32 %2, ptr %7, align 4\l  %8 = load ptr, ptr %6, align 8\l  %9 = icmp eq ptr %8, null\l  br i1 %9, label %10, label %11\l|{<s0>T|<s1>F}}"];
	Node0x60000227def0:s0 -> Node0x60000227df40[tooltip="3 -> 10\nProbability 37.50%" ];
	Node0x60000227def0:s1 -> Node0x60000227df90[tooltip="3 -> 11\nProbability 62.50%" ];
	Node0x60000227df40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70" fontname="Courier",label="{10:\l|  store i64 0, ptr %4, align 8\l  br label %159\l}"];
	Node0x60000227df40 -> Node0x60000227e260[tooltip="10 -> 159\nProbability 100.00%" ];
	Node0x60000227df90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{11:\l|  %12 = load i64, ptr %5, align 8\l  %13 = xor i64 %12, 4294967295\l  store i64 %13, ptr %5, align 8\l  br label %14\l}"];
	Node0x60000227df90 -> Node0x60000227dfe0[tooltip="11 -> 14\nProbability 100.00%" ];
	Node0x60000227dfe0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{14:\l|  %15 = load i32, ptr %7, align 4\l  %16 = icmp uge i32 %15, 8\l  br i1 %16, label %17, label %132\l|{<s0>T|<s1>F}}"];
	Node0x60000227dfe0:s0 -> Node0x60000227e030[tooltip="14 -> 17\nProbability 96.88%" ];
	Node0x60000227dfe0:s1 -> Node0x60000227e080[tooltip="14 -> 132\nProbability 3.12%" ];
	Node0x60000227e030 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{17:\l|  %18 = load i64, ptr %5, align 8\l  %19 = trunc i64 %18 to i32\l  %20 = load ptr, ptr %6, align 8\l  %21 = getelementptr inbounds i8, ptr %20, i32 1\l  store ptr %21, ptr %6, align 8\l  %22 = load i8, ptr %20, align 1\l  %23 = zext i8 %22 to i32\l  %24 = xor i32 %19, %23\l  %25 = and i32 %24, 255\l  %26 = sext i32 %25 to i64\l  %27 = getelementptr inbounds [256 x i64], ptr @crc_table, i64 0, i64 %26\l  %28 = load i64, ptr %27, align 8\l  %29 = load i64, ptr %5, align 8\l  %30 = lshr i64 %29, 8\l  %31 = xor i64 %28, %30\l  store i64 %31, ptr %5, align 8\l  %32 = load i64, ptr %5, align 8\l  %33 = trunc i64 %32 to i32\l  %34 = load ptr, ptr %6, align 8\l  %35 = getelementptr inbounds i8, ptr %34, i32 1\l  store ptr %35, ptr %6, align 8\l  %36 = load i8, ptr %34, align 1\l  %37 = zext i8 %36 to i32\l  %38 = xor i32 %33, %37\l  %39 = and i32 %38, 255\l  %40 = sext i32 %39 to i64\l  %41 = getelementptr inbounds [256 x i64], ptr @crc_table, i64 0, i64 %40\l  %42 = load i64, ptr %41, align 8\l  %43 = load i64, ptr %5, align 8\l  %44 = lshr i64 %43, 8\l  %45 = xor i64 %42, %44\l  store i64 %45, ptr %5, align 8\l  %46 = load i64, ptr %5, align 8\l  %47 = trunc i64 %46 to i32\l  %48 = load ptr, ptr %6, align 8\l  %49 = getelementptr inbounds i8, ptr %48, i32 1\l  store ptr %49, ptr %6, align 8\l  %50 = load i8, ptr %48, align 1\l  %51 = zext i8 %50 to i32\l  %52 = xor i32 %47, %51\l  %53 = and i32 %52, 255\l  %54 = sext i32 %53 to i64\l  %55 = getelementptr inbounds [256 x i64], ptr @crc_table, i64 0, i64 %54\l  %56 = load i64, ptr %55, align 8\l  %57 = load i64, ptr %5, align 8\l  %58 = lshr i64 %57, 8\l  %59 = xor i64 %56, %58\l  store i64 %59, ptr %5, align 8\l  %60 = load i64, ptr %5, align 8\l  %61 = trunc i64 %60 to i32\l  %62 = load ptr, ptr %6, align 8\l  %63 = getelementptr inbounds i8, ptr %62, i32 1\l  store ptr %63, ptr %6, align 8\l  %64 = load i8, ptr %62, align 1\l  %65 = zext i8 %64 to i32\l  %66 = xor i32 %61, %65\l  %67 = and i32 %66, 255\l  %68 = sext i32 %67 to i64\l  %69 = getelementptr inbounds [256 x i64], ptr @crc_table, i64 0, i64 %68\l  %70 = load i64, ptr %69, align 8\l  %71 = load i64, ptr %5, align 8\l  %72 = lshr i64 %71, 8\l  %73 = xor i64 %70, %72\l  store i64 %73, ptr %5, align 8\l  %74 = load i64, ptr %5, align 8\l  %75 = trunc i64 %74 to i32\l  %76 = load ptr, ptr %6, align 8\l  %77 = getelementptr inbounds i8, ptr %76, i32 1\l  store ptr %77, ptr %6, align 8\l  %78 = load i8, ptr %76, align 1\l  %79 = zext i8 %78 to i32\l  %80 = xor i32 %75, %79\l  %81 = and i32 %80, 255\l  %82 = sext i32 %81 to i64\l  %83 = getelementptr inbounds [256 x i64], ptr @crc_table, i64 0, i64 %82\l  %84 = load i64, ptr %83, align 8\l  %85 = load i64, ptr %5, align 8\l  %86 = lshr i64 %85, 8\l  %87 = xor i64 %84, %86\l  store i64 %87, ptr %5, align 8\l  %88 = load i64, ptr %5, align 8\l  %89 = trunc i64 %88 to i32\l  %90 = load ptr, ptr %6, align 8\l  %91 = getelementptr inbounds i8, ptr %90, i32 1\l  store ptr %91, ptr %6, align 8\l  %92 = load i8, ptr %90, align 1\l  %93 = zext i8 %92 to i32\l  %94 = xor i32 %89, %93\l  %95 = and i32 %94, 255\l  %96 = sext i32 %95 to i64\l  %97 = getelementptr inbounds [256 x i64], ptr @crc_table, i64 0, i64 %96\l  %98 = load i64, ptr %97, align 8\l  %99 = load i64, ptr %5, align 8\l  %100 = lshr i64 %99, 8\l  %101 = xor i64 %98, %100\l  store i64 %101, ptr %5, align 8\l  %102 = load i64, ptr %5, align 8\l  %103 = trunc i64 %102 to i32\l  %104 = load ptr, ptr %6, align 8\l  %105 = getelementptr inbounds i8, ptr %104, i32 1\l  store ptr %105, ptr %6, align 8\l  %106 = load i8, ptr %104, align 1\l  %107 = zext i8 %106 to i32\l  %108 = xor i32 %103, %107\l  %109 = and i32 %108, 255\l  %110 = sext i32 %109 to i64\l  %111 = getelementptr inbounds [256 x i64], ptr @crc_table, i64 0, i64 %110\l  %112 = load i64, ptr %111, align 8\l  %113 = load i64, ptr %5, align 8\l  %114 = lshr i64 %113, 8\l  %115 = xor i64 %112, %114\l  store i64 %115, ptr %5, align 8\l  %116 = load i64, ptr %5, align 8\l  %117 = trunc i64 %116 to i32\l  %118 = load ptr, ptr %6, align 8\l  %119 = getelementptr inbounds i8, ptr %118, i32 1\l  store ptr %119, ptr %6, align 8\l  %120 = load i8, ptr %118, align 1\l  %121 = zext i8 %120 to i32\l  %122 = xor i32 %117, %121\l  %123 = and i32 %122, 255\l  %124 = sext i32 %123 to i64\l  %125 = getelementptr inbounds [256 x i64], ptr @crc_table, i64 0, i64 %124\l  %126 = load i64, ptr %125, align 8\l  %127 = load i64, ptr %5, align 8\l  %128 = lshr i64 %127, 8\l  %129 = xor i64 %126, %128\l  store i64 %129, ptr %5, align 8\l  %130 = load i32, ptr %7, align 4\l  %131 = sub i32 %130, 8\l  store i32 %131, ptr %7, align 4\l  br label %14\l}"];
	Node0x60000227e030 -> Node0x60000227dfe0[tooltip="17 -> 14\nProbability 100.00%" ];
	Node0x60000227e080 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{132:\l|  %133 = load i32, ptr %7, align 4\l  %134 = icmp ne i32 %133, 0\l  br i1 %134, label %135, label %156\l|{<s0>T|<s1>F}}"];
	Node0x60000227e080:s0 -> Node0x60000227e0d0[tooltip="132 -> 135\nProbability 62.50%" ];
	Node0x60000227e080:s1 -> Node0x60000227e210[tooltip="132 -> 156\nProbability 37.50%" ];
	Node0x60000227e0d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670" fontname="Courier",label="{135:\l|  br label %136\l}"];
	Node0x60000227e0d0 -> Node0x60000227e120[tooltip="135 -> 136\nProbability 100.00%" ];
	Node0x60000227e120 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70" fontname="Courier",label="{136:\l|  %137 = load i64, ptr %5, align 8\l  %138 = trunc i64 %137 to i32\l  %139 = load ptr, ptr %6, align 8\l  %140 = getelementptr inbounds i8, ptr %139, i32 1\l  store ptr %140, ptr %6, align 8\l  %141 = load i8, ptr %139, align 1\l  %142 = zext i8 %141 to i32\l  %143 = xor i32 %138, %142\l  %144 = and i32 %143, 255\l  %145 = sext i32 %144 to i64\l  %146 = getelementptr inbounds [256 x i64], ptr @crc_table, i64 0, i64 %145\l  %147 = load i64, ptr %146, align 8\l  %148 = load i64, ptr %5, align 8\l  %149 = lshr i64 %148, 8\l  %150 = xor i64 %147, %149\l  store i64 %150, ptr %5, align 8\l  br label %151\l}"];
	Node0x60000227e120 -> Node0x60000227e170[tooltip="136 -> 151\nProbability 100.00%" ];
	Node0x60000227e170 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70" fontname="Courier",label="{151:\l|  %152 = load i32, ptr %7, align 4\l  %153 = add i32 %152, -1\l  store i32 %153, ptr %7, align 4\l  %154 = icmp ne i32 %153, 0\l  br i1 %154, label %136, label %155\l|{<s0>T|<s1>F}}"];
	Node0x60000227e170:s0 -> Node0x60000227e120[tooltip="151 -> 136\nProbability 96.88%" ];
	Node0x60000227e170:s1 -> Node0x60000227e1c0[tooltip="151 -> 155\nProbability 3.12%" ];
	Node0x60000227e1c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d8564670" fontname="Courier",label="{155:\l|  br label %156\l}"];
	Node0x60000227e1c0 -> Node0x60000227e210[tooltip="155 -> 156\nProbability 100.00%" ];
	Node0x60000227e210 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6524470" fontname="Courier",label="{156:\l|  %157 = load i64, ptr %5, align 8\l  %158 = xor i64 %157, 4294967295\l  store i64 %158, ptr %4, align 8\l  br label %159\l}"];
	Node0x60000227e210 -> Node0x60000227e260[tooltip="156 -> 159\nProbability 100.00%" ];
	Node0x60000227e260 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d24b4070" fontname="Courier",label="{159:\l|  %160 = load i64, ptr %4, align 8\l  ret i64 %160\l}"];
}
