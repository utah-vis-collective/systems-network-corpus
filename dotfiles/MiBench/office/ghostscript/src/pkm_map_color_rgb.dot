digraph "CFG for 'pkm_map_color_rgb' function" {
	label="CFG for 'pkm_map_color_rgb' function";

	Node0x6000034c81e0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870" fontname="Courier",label="{3:\l|  %4 = alloca ptr, align 8\l  %5 = alloca i64, align 8\l  %6 = alloca ptr, align 8\l  %7 = alloca i64, align 8\l  %8 = alloca i32, align 4\l  %9 = alloca i32, align 4\l  %10 = alloca i32, align 4\l  %11 = alloca i32, align 4\l  %12 = alloca i32, align 4\l  %13 = alloca i32, align 4\l  %14 = alloca i32, align 4\l  store ptr %0, ptr %4, align 8\l  store i64 %1, ptr %5, align 8\l  store ptr %2, ptr %6, align 8\l  %15 = load i64, ptr %5, align 8\l  store i64 %15, ptr %7, align 8\l  %16 = load ptr, ptr %4, align 8\l  %17 = getelementptr inbounds %struct.gx_device_s, ptr %16, i32 0, i32 7\l  %18 = getelementptr inbounds %struct.gx_device_color_info_s, ptr %17, i32 0,\l... i32 1\l  %19 = load i32, ptr %18, align 4\l  %20 = ashr i32 %19, 2\l  store i32 %20, ptr %8, align 4\l  %21 = load i32, ptr %8, align 4\l  %22 = shl i32 1, %21\l  %23 = sub nsw i32 %22, 1\l  store i32 %23, ptr %9, align 4\l  %24 = load ptr, ptr %4, align 8\l  %25 = getelementptr inbounds %struct.gx_device_s, ptr %24, i32 0, i32 7\l  %26 = getelementptr inbounds %struct.gx_device_color_info_s, ptr %25, i32 0,\l... i32 3\l  %27 = load i16, ptr %26, align 2\l  %28 = zext i16 %27 to i32\l  store i32 %28, ptr %10, align 4\l  %29 = load i64, ptr %7, align 8\l  %30 = load i32, ptr %9, align 4\l  %31 = zext i32 %30 to i64\l  %32 = and i64 %29, %31\l  %33 = trunc i64 %32 to i32\l  store i32 %33, ptr %14, align 4\l  %34 = load i32, ptr %8, align 4\l  %35 = load i64, ptr %7, align 8\l  %36 = zext i32 %34 to i64\l  %37 = lshr i64 %35, %36\l  store i64 %37, ptr %7, align 8\l  %38 = load i64, ptr %7, align 8\l  %39 = load i32, ptr %9, align 4\l  %40 = zext i32 %39 to i64\l  %41 = and i64 %38, %40\l  %42 = trunc i64 %41 to i32\l  store i32 %42, ptr %13, align 4\l  %43 = load i32, ptr %8, align 4\l  %44 = load i64, ptr %7, align 8\l  %45 = zext i32 %43 to i64\l  %46 = lshr i64 %44, %45\l  store i64 %46, ptr %7, align 8\l  %47 = load i64, ptr %7, align 8\l  %48 = load i32, ptr %9, align 4\l  %49 = zext i32 %48 to i64\l  %50 = and i64 %47, %49\l  %51 = trunc i64 %50 to i32\l  store i32 %51, ptr %12, align 4\l  %52 = load i64, ptr %7, align 8\l  %53 = load i32, ptr %8, align 4\l  %54 = zext i32 %53 to i64\l  %55 = lshr i64 %52, %54\l  %56 = trunc i64 %55 to i32\l  store i32 %56, ptr %11, align 4\l  %57 = load i32, ptr %10, align 4\l  %58 = load i32, ptr %11, align 4\l  %59 = sub i32 %57, %58\l  %60 = load i32, ptr %10, align 4\l  %61 = load i32, ptr %14, align 4\l  %62 = sub i32 %60, %61\l  %63 = mul i32 %59, %62\l  %64 = load i32, ptr %10, align 4\l  %65 = udiv i32 %63, %64\l  %66 = zext i32 %65 to i64\l  %67 = mul i64 %66, 65535\l  %68 = load i32, ptr %10, align 4\l  %69 = zext i32 %68 to i64\l  %70 = udiv i64 %67, %69\l  %71 = trunc i64 %70 to i16\l  %72 = load ptr, ptr %6, align 8\l  %73 = getelementptr inbounds i16, ptr %72, i64 0\l  store i16 %71, ptr %73, align 2\l  %74 = load i32, ptr %10, align 4\l  %75 = load i32, ptr %12, align 4\l  %76 = sub i32 %74, %75\l  %77 = load i32, ptr %10, align 4\l  %78 = load i32, ptr %14, align 4\l  %79 = sub i32 %77, %78\l  %80 = mul i32 %76, %79\l  %81 = load i32, ptr %10, align 4\l  %82 = udiv i32 %80, %81\l  %83 = zext i32 %82 to i64\l  %84 = mul i64 %83, 65535\l  %85 = load i32, ptr %10, align 4\l  %86 = zext i32 %85 to i64\l  %87 = udiv i64 %84, %86\l  %88 = trunc i64 %87 to i16\l  %89 = load ptr, ptr %6, align 8\l  %90 = getelementptr inbounds i16, ptr %89, i64 1\l  store i16 %88, ptr %90, align 2\l  %91 = load i32, ptr %10, align 4\l  %92 = load i32, ptr %13, align 4\l  %93 = sub i32 %91, %92\l  %94 = load i32, ptr %10, align 4\l  %95 = load i32, ptr %14, align 4\l  %96 = sub i32 %94, %95\l  %97 = mul i32 %93, %96\l  %98 = load i32, ptr %10, align 4\l  %99 = udiv i32 %97, %98\l  %100 = zext i32 %99 to i64\l  %101 = mul i64 %100, 65535\l  %102 = load i32, ptr %10, align 4\l  %103 = zext i32 %102 to i64\l  %104 = udiv i64 %101, %103\l  %105 = trunc i64 %104 to i16\l  %106 = load ptr, ptr %6, align 8\l  %107 = getelementptr inbounds i16, ptr %106, i64 2\l  store i16 %105, ptr %107, align 2\l  ret i32 0\l}"];
}
